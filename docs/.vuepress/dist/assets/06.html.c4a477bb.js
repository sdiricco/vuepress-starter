import{_ as e,o as a,c as n,a as o}from"./app.30ed76b5.js";var i="/assets/pwm-signal.3e34eae8.svg";const s={},c=o('<h1 id="pwm" tabindex="-1"><a class="header-anchor" href="#pwm" aria-hidden="true">#</a> PWM</h1><p>In elettronica e telecomunicazioni la modulazione di larghezza di impulso (o PWM, acronimo del corrispettivo inglese pulse-width modulation) \xE8 un tipo di modulazione digitale che permette di ottenere una tensione media variabile dipendente dal rapporto tra la durata dell&#39;impulso positivo e dell&#39;intero periodo (duty cycle). Allo stesso modo, \xE8 fondamentalmente utilizzato per protocolli di comunicazione in cui l&#39;informazione \xE8 codificata sotto forma di durata nel tempo di ciascun impulso. Grazie ai moderni microcontrollori, \xE8 possibile attivare o disattivare un interruttore ad alta frequenza e allo stesso modo rilevare lo stato e il periodo di un impulso.</p><p><img src="'+i+`" alt=""></p><p>Poich\xE8 arduino \xE8 alimentato a <code>5V</code> se volessi ottenere un valore medio pari a <code>2.5V</code> in uscita da un pin digitale dovrei generare un segnale <code>PWM</code> con le seguenti caratteristiche:</p><ul><li>Frequenza: fissa. Valori standard di frequenza per i segnali PWM vanno da qualche centinaia di <code>Hz</code> a qualche <code>Khz</code>. Il valore di frequenza \xE8 stabilito internamente da Arduino quindi per adesso non dovrai preoccupartene.</li><li>Duty cicle: <code>50%</code>. Per impostare il duty cicle si imposta un valore nel range <code>0-255</code> all&#39;interno della funzione <code>analogWrite()</code>. Attraverso la proporzione:</li></ul><div class="language-math ext-math line-numbers-mode"><pre class="language-math"><code>dutyCicle% : 100% = value: 255
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Poich\xE8 vogliamo <code>dutyCicle% = 50%</code>, allora <code>value = 127</code></p><p>Nel prossimo esempio generer\xF2 un segnale <code>PWM</code> con <code>duty cicle = 50%</code> per controllare la luminosit\xE0 di un LED.</p><p>Per far ci\xF2 \xE8 necessario:</p><ul><li>collegare un LED a un PIN qualsiasi con uscita PWM. Sono quelli identificati dal simbolo <code>~</code>. Utilizzer\xF2 il pin <code>9</code></li><li>chiamare il comando <code>analogWrite()</code> specificando come primo parametro il pin sul quale si desidera generare il segnale <code>PWM</code>, quindi il pin <code>9</code> e come secondo parametro il <code>duty cicle</code> espresso con un numero da <code>[0 - 255]</code>. Per ottenere un <code>duty cicle</code> del <code>50%</code> scriver\xF2 <code>127</code></li></ul><p>Lo sketch completo \xE8:</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token keyword">void</span> <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">loop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">analogWrite</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12),l=[c];function t(d,r){return a(),n("div",null,l)}var u=e(s,[["render",t],["__file","06.html.vue"]]);export{u as default};
