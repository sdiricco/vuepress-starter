import{_ as o,o as i,c as p,b as n,d as e,a as t,e as s,r as l}from"./app.30ed76b5.js";var c="/assets/install-python.7ab006a2.gif",r="/assets/python-extension-vscode.8df91460.gif",u="/assets/ciao-mondo-python.8ff4c024.gif",d="/assets/pip-install.2f9959da.gif",m="/assets/maps-script.17614b0f.gif",k="/assets/python-executable-linux.97a5bbad.gif",v="/assets/pdf-1.2932fdc2.gif",b="/assets/pdf-2.0d3691ba.gif",f="/assets/mergeAllPdf.29b0bc20.gif",g="/assets/asta-01.b3c597bf.gif",h="/assets/asta-02.55cd10af.gif",y="/assets/try-except-01.ba51afbd.gif",q="/assets/try-except-02.57e5a1cd.gif",w="/assets/asta-03.0e4d3a75.gif",_="/assets/if-in.9e9f334f.gif",z="/assets/asta-04.723d29c7.gif",x="/assets/asta-05.81a06a4e.gif";const L={},P=t('<h1 id="python" tabindex="-1"><a class="header-anchor" href="#python" aria-hidden="true">#</a> Python</h1><h1 id="lezione-01" tabindex="-1"><a class="header-anchor" href="#lezione-01" aria-hidden="true">#</a> Lezione 01</h1><h2 id="prerequisiti" tabindex="-1"><a class="header-anchor" href="#prerequisiti" aria-hidden="true">#</a> Prerequisiti</h2><p>Conoscenza di un linguaggio qualsiasi OOP come C++ o Javascript</p><h2 id="corso-python" tabindex="-1"><a class="header-anchor" href="#corso-python" aria-hidden="true">#</a> Corso Python</h2><p>Python \u{1F389} \xE8 un linguaggio di programmazione di pi\xF9 &quot;alto livello&quot; rispetto alla maggior parte degli altri linguaggi, orientato a oggetti, adatto, tra gli altri usi, a sviluppare applicazioni distribuite, scripting, computazione numerica e system testing.</p><p>Ideato da Guido van Rossum all&#39;inizio degli anni novanta, il nome fu scelto per la passione dello stesso inventore verso i Monty Python e per la loro serie televisiva Monty Python&#39;s Flying Circus ed \xE8 spesso paragonato a Ruby, Tcl, Perl, JavaScript, Visual Basic o Scheme</p>',7),F={href:"https://it.wikipedia.org/wiki/Python",target:"_blank",rel:"noopener noreferrer"},I=s("Wikipedia - Python"),E=n("h2",{id:"installazione-e-setup",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#installazione-e-setup","aria-hidden":"true"},"#"),s(" Installazione e setup")],-1),D=s("Collegati alla pagina ufficiale di "),S={href:"https://www.python.org/downloads/",target:"_blank",rel:"noopener noreferrer"},A=s("Python"),C=s(" e installa la versione per il tuo sistema operativo."),R=t(`<h2 id="installazione-e-setup-linux" tabindex="-1"><a class="header-anchor" href="#installazione-e-setup-linux" aria-hidden="true">#</a> Installazione e setup - Linux</h2><p>Per i sistemi su base linux \xE8 sufficiente digitare i seguenti comandi:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> python3
<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> python3-pip
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Nota:</strong> Il modulo <em>pip</em> di Python permette la gestione e l&#39;installazione di moduli esterni</p><p>Per verificare la corretta installazione dell&#39;interprete python digitare da terminale <code>python3</code>. In questo modo apriremo inoltre la shell interattiva di python in cui sar\xE0 possibile inserire direttamente del codice ed avere una risposta simultanea</p><p><img src="`+c+'" alt=""></p><h2 id="configurazione-di-un-ide" tabindex="-1"><a class="header-anchor" href="#configurazione-di-un-ide" aria-hidden="true">#</a> Configurazione di un IDE</h2>',7),O=s("Un ottimo ambiente di sviluppo per Python \xE8 "),M={href:"https://www.jetbrains.com/pycharm/download/",target:"_blank",rel:"noopener noreferrer"},T=s("Pycharm"),N=s("."),V=n("br",null,null,-1),U=s(" Per questo corso ho preferito non utilizzare un IDE specifico come Pycharm ma uno con un target pi\xF9 ad uso generale come "),Z={href:"https://code.visualstudio.com/",target:"_blank",rel:"noopener noreferrer"},W=s("Visual Studio Code"),Q=s(" con l'ausilio di un'estensione che possa supportare gli emmet (abbreviazioni intelligenti) per il linguaggio python e opzioni per il debug del codice. L'estension che ho installato si chiama "),$=n("em",null,"Python",-1),B=s(" ed \xE8 quella che riporto nell'immagine animata qua sotto."),K=t('<p><img src="'+r+`" alt=""></p><h1 id="lezione-02" tabindex="-1"><a class="header-anchor" href="#lezione-02" aria-hidden="true">#</a> Lezione 02</h1><h2 id="primo-script" tabindex="-1"><a class="header-anchor" href="#primo-script" aria-hidden="true">#</a> Primo script</h2><p>Ogni file python ha un&#39;estensione <code>.py</code>.</p><p>Per l&#39;esecuzione di uno script python \xE8 possibile lanciare il file creato con l&#39;estensione <code>.py</code> (esempio <code>test.py</code>) direttamente dal terminale digitando il comando per l&#39;invocazione dell&#39;interprete python <code>python3</code> ad esempio <code>python3 test.py</code> all&#39;interno della cartella contenente il file <code>test.py</code> oppure attraverso l&#39;estensione appena installata per VS code <code>Run/Start Debugging</code></p><p>Ecco l&#39;esecuzione del primo script python</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;ciao mondo&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+u+`" alt=""></p><h2 id="aggiunta-di-moduli" tabindex="-1"><a class="header-anchor" href="#aggiunta-di-moduli" aria-hidden="true">#</a> Aggiunta di moduli</h2><p>Per l&#39;aggiunta di un modulo che rientra nella libreria standard python basta semplicemente digitare:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">import</span> <span class="token operator">&lt;</span>nomeModulo<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>A volte tuttavia potremmo aver bisogno di un modulo non standard disponibile sul web. Per installarlo possiamo far ricorso al pacchetto <code>pip</code> che permette la gestione e l&#39;installazione dei moduli aggiuntivi python.</p><p>Supponiamo di voler scaricare il modulo <code>PyPDF2</code> per la gestione dei PDF. Digitare da terminale</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>pip <span class="token function">install</span> PyPDF2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Qualora si avessero dubbi sul nome del modulo o sul comando esatto, niente paura, il browser ci \xE8 di supporto</p><p><img src="`+d+`" alt="">\xF9</p><h1 id="lezione-03" tabindex="-1"><a class="header-anchor" href="#lezione-03" aria-hidden="true">#</a> Lezione 03</h1><h2 id="introduzione-a-webbrowser" tabindex="-1"><a class="header-anchor" href="#introduzione-a-webbrowser" aria-hidden="true">#</a> Introduzione a webbrowser</h2><p>Il seguente script aprir\xE0 una localit\xE0 su google.maps digitata come input dall&#39;utente.</p><p>Utilizzeremo il comando <code>input()</code> che permette l&#39;acquisizione dati da tastiera e la funzione <code>open</code> del modulo python <code>webbrowser</code>. <br> La funzione <code>open</code> permette di aprire un certo <code>url</code> specificato come parametro tra gli apici. Il parametro \xE8 quindi passato come una stringa e come tale valgono tutte le operazioni e i metodi applicabili su stringa tra cui l&#39;operatore <code>+</code> utilizzato per concatenare due o pi\xF9 stringhe .</p><ul><li><code>input()</code>: consente l&#39;acquisizione dati da tastiera dell&#39;utente.</li><li><code>webbrowser.open(myUrl)</code>: Apre l&#39;indirizzo web specificato dal parametro <em>myUrl</em>. Il parametro specificato viene passato come stringa</li><li><code>+</code>: Operatore di concatenazione stringhe</li></ul><p>Ecco lo script completo:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">import</span> webbrowser
destinazione <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
webbrowser<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;https://www.google.com/maps&#39;</span> <span class="token operator">+</span> <span class="token string">&#39;/place/&#39;</span> <span class="token operator">+</span> destinazione<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+m+`" alt=""></p><p>E&#39; possibile ridurre ancora il codice</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">import</span> webbrowser
webbrowser<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;https://www.google.com/maps&#39;</span> <span class="token operator">+</span> <span class="token string">&#39;/place/&#39;</span> <span class="token operator">+</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="come-rendo-eseguibile-un-file-python" tabindex="-1"><a class="header-anchor" href="#come-rendo-eseguibile-un-file-python" aria-hidden="true">#</a> Come rendo eseguibile un file python?</h2><h2 id="linux" tabindex="-1"><a class="header-anchor" href="#linux" aria-hidden="true">#</a> Linux</h2><p>Aggiungere la seguente linea di codice in testa allo script:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token comment">#!/usr/bin/env python3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Ad esempio:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token comment">#!/usr/bin/env python3</span>
<span class="token keyword">import</span> webbrowser
webbrowser<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&#39;https://www.google.com/maps&#39;</span> <span class="token operator">+</span> <span class="token string">&#39;/place/&#39;</span> <span class="token operator">+</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>E&#39; sufficiente rendere il file <em>eseguibile</em> (all&#39;interno delle propriet\xE0 del file sezione &quot;permessi&quot;) e lanciarlo da terminale.</p><p><img src="`+k+`" alt=""></p><h2 id="commenti" tabindex="-1"><a class="header-anchor" href="#commenti" aria-hidden="true">#</a> Commenti</h2><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token comment"># questo \xE8 un commento e verr\xE0 ignorato dall&#39;interprete</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;ciao&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="lezione-04" tabindex="-1"><a class="header-anchor" href="#lezione-04" aria-hidden="true">#</a> Lezione 04</h1><h2 id="introduzione-al-modulo-pypdf2" tabindex="-1"><a class="header-anchor" href="#introduzione-al-modulo-pypdf2" aria-hidden="true">#</a> Introduzione al modulo PyPDF2</h2><p>Il seguente script tratter\xE0 l&#39;elaborazione di file pdf. Saremo in grado quindi di generare un file pdf con nome predefinito &quot;Output.pdf&quot; che \xE8 la copia della prima pagina di un pdf con nome &quot;input.pdf&quot; ricevuto in input</p>`,39),G=s("Faremo uso del modulo aggiuntivo "),J={href:"https://pythonhosted.org/PyPDF2/",target:"_blank",rel:"noopener noreferrer"},j=s("PyPDF2"),H=s(" da installare da terminale tramite il comando "),X=n("code",null,"pip install PyPDF2",-1),Y=t("<p>Utilizzeremo le funzioni standard Python di apertuta e chiusura file:</p><ul><li><code>open(myFile, mode)</code>: apre un file e lo restituisce come oggetto. <ul><li><code>myfile</code> indica il nome comprensivo del path del file da aprire</li><li><code>mode</code> indica la modalit\xE0 di apertura del file <ul><li><code>mode = &quot;r&quot;</code> modalit\xE0 lettura</li><li><code>mode = &quot;rb&quot;</code> modalit\xE0 lettura binaria</li><li><code>mode = &quot;w&quot;</code> modalit\xE0 scrittura</li><li><code>mode = &quot;wb&quot;</code> modalit\xE0 scrittura binaria</li></ul></li></ul></li><li><code>close()</code>: chiude un file aperto. \xC8 necessario chiudere sempre i file aperti poich\xE8 in alcuni casi, a causa del buffering, le modifiche apportate a un file potrebbero non essere visualizzate finch\xE9 non si chiude il file.</li></ul>",2),nn={href:"https://www.w3schools.com/python/ref_func_open.asp",target:"_blank",rel:"noopener noreferrer"},sn=s("w3schools - Python open() Function"),an=n("br",null,null,-1),en={href:"https://www.w3schools.com/python/ref_file_close.asp",target:"_blank",rel:"noopener noreferrer"},tn=s("w3schools - Python close() Function"),on=n("br",null,null,-1),pn=n("p",null,[s("Del modulo aggiuntivo "),n("strong",null,"PyPDF2"),s(" utilizzeremo le classi:")],-1),ln=n("code",null,"PdfFileReader(myPdf)",-1),cn=s(": Chiama il costruttore della classe "),rn=n("em",null,"PdfFileReader",-1),un=s(" che inzializza in lettura il file oggetto pdf "),dn=n("em",null,"myPdf",-1),mn=s(" ricevuto come parametro e restituisce un'istanza della classe "),kn=n("em",null,"PdfFileReader",-1),vn=n("br",null,null,-1),bn={href:"https://pythonhosted.org/PyPDF2/PdfFileReader.html",target:"_blank",rel:"noopener noreferrer"},fn=s("The PdfFileReader Class"),gn=n("br",null,null,-1),hn=n("strong",null,"Metodi",-1),yn=n("br",null,null,-1),qn=n("ul",null,[n("li",null,[n("code",null,"getPage(pageNumber)"),s(": restituisce una pagina in base al numero "),n("em",null,"pageNumber"),s(" passato come parametro"),n("br")])],-1),wn=n("code",null,"PdfFileWriter()",-1),_n=s(": Chiama il costruttore della classe "),zn=n("em",null,"PdfFileWriter()",-1),xn=s(" che inizializza in scrittura un file oggetto pdf e restituisce un'istanza della classe "),Ln=n("em",null,"PdfFileWriter()",-1),Pn=n("br",null,null,-1),Fn={href:"https://pythonhosted.org/PyPDF2/PdfFileWriter.html",target:"_blank",rel:"noopener noreferrer"},In=s("The PdfFileWriter Class"),En=n("br",null,null,-1),Dn=n("strong",null,"Metodi",-1),Sn=n("br",null,null,-1),An=n("ul",null,[n("li",null,[n("code",null,"addPage(page)"),s(": Aggiunge una pagina PDF, all'istanza della classe "),n("em",null,"PdfFileWriter"),s(" a cui si applica il metodo. La pagina viene solitamente acquisita da un'istanza di "),n("em",null,"PdfFileReader"),s(".")]),n("li",null,[n("code",null,"write(myPdf)"),s(": Scrive (su disco, da ram a rom) la raccolta di pagine aggiunte a questo oggetto come file PDF, riceve come parametro l'oggetto pdf da scrivere, "),n("em",null,"myPdf"),s(".")])],-1),Cn=t(`<p><strong>Nota:</strong> Le &quot;funzioni/classi&quot; di un modulo devono essere invocate sempre specificando il nome del modulo.</p><p>Esempio:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">import</span> PyPDF2
pdfInput <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;pdf/input.pdf&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;rb&quot;</span><span class="token punctuation">)</span>
<span class="token comment">#PyPDF2 \xE8 il nome del modulo, PdfFileReader \xE8 il nome della classe del modulo PyPDF2</span>
reader1 <span class="token operator">=</span> PyPDF2<span class="token punctuation">.</span>PdfFileReader<span class="token punctuation">(</span>pdfInput<span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Script completo</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">import</span> PyPDF2

<span class="token comment">#Apro il file &lt;input.pdf&gt; all&#39;interno della cartella &lt;pdf&gt; in modalit\xE0 lettura binaria</span>
<span class="token comment">#Restituisco un oggetto all&#39;interno della variabile &lt;pdfInput&gt;</span>
pdfInput <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;pdf/input.pdf&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;rb&quot;</span><span class="token punctuation">)</span>
<span class="token comment">#Restituisco un&#39;istanza della classe &lt;PdfFileReader&gt; all&#39;interno della variabile &lt;reader1&gt;</span>
reader1 <span class="token operator">=</span> PyPDF2<span class="token punctuation">.</span>PdfFileReader<span class="token punctuation">(</span>pdfInput<span class="token punctuation">)</span> 

<span class="token comment">#apro un file &lt;Output.pdf&gt; all&#39;interno della cartella &lt;pdf&gt; in modalit\xE0 scrittura binaria</span>
<span class="token comment">#Restituisco un oggetto all&#39;interno della variabile &lt;pdfOutput&gt;</span>
pdfOutput <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;pdf/Output.pdf&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;wb&quot;</span><span class="token punctuation">)</span>
<span class="token comment">#Restituisco un&#39;istanza della classe &lt;PyPDF2.PdfFileWriter&gt; all&#39;interno della variabile &lt;writer1&gt;</span>
writer1 <span class="token operator">=</span> PyPDF2<span class="token punctuation">.</span>PdfFileWriter<span class="token punctuation">(</span><span class="token punctuation">)</span> 

<span class="token comment">#Prelevo la pagina numero &lt;0&gt; e ritorno un oggetto pdf di una pagina all&#39;interno della variabile &lt;pag0&gt;</span>
pag0 <span class="token operator">=</span> reader1<span class="token punctuation">.</span>getPage<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>

<span class="token comment">#Aggiungo in coda pag0 all&#39;istanza &lt;writer1&gt; (della classe PdfFileWriter) </span>
<span class="token comment">#Ripeto l&#39;operazione per tre volte</span>
writer1<span class="token punctuation">.</span>addPage<span class="token punctuation">(</span>pag0<span class="token punctuation">)</span>
writer1<span class="token punctuation">.</span>addPage<span class="token punctuation">(</span>pag0<span class="token punctuation">)</span>
writer1<span class="token punctuation">.</span>addPage<span class="token punctuation">(</span>pag0<span class="token punctuation">)</span>

<span class="token comment">#Scrittura su disco dell&#39;istanza della classe &lt;writer1&gt; su &lt;pdfOutput&gt; l&#39;oggetto in scrittura corrispondente a &quot;Output.pdf&quot;</span>
writer1<span class="token punctuation">.</span>write<span class="token punctuation">(</span>pdfOutput<span class="token punctuation">)</span>

<span class="token comment">#aChiudo i File</span>
pdfInput<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
pdfOutput<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+v+`" alt=""></p><h1 id="lezione-05" tabindex="-1"><a class="header-anchor" href="#lezione-05" aria-hidden="true">#</a> Lezione 05</h1><h2 id="costrutto-condizionale-if-else" tabindex="-1"><a class="header-anchor" href="#costrutto-condizionale-if-else" aria-hidden="true">#</a> Costrutto condizionale <code>if...else</code></h2><p>Le istruzioni condizionali vengono utilizzate per eseguire un blocco di codice solo nel caso in cui una condizione risulti <em>true</em> o <em>false</em></p><p>Sintassi costrutto <code>if</code> esteso:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">if</span> condition1<span class="token punctuation">:</span>
    <span class="token comment">#code 01</span>
    <span class="token comment">#..</span>
<span class="token keyword">elif</span> condition2<span class="token punctuation">:</span>
    <span class="token comment">#code 02</span>
    <span class="token comment">#..</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token comment">#code 03</span>
    <span class="token comment">#..</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Esempio:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span>&quot;Inserisci due numeri<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>

primoValore <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
secondoValore <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> a <span class="token operator">&gt;</span> b<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Il primo valore inserito, &quot;</span> <span class="token operator">+</span> primoValore <span class="token operator">+</span> <span class="token string">&quot; \xE8 maggiore del secondo valore inserito, &quot;</span> <span class="token operator">+</span> secondoValore<span class="token punctuation">)</span>
<span class="token keyword">elif</span> b <span class="token operator">&gt;</span> a<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Il secondo valore inserito, &quot;</span> <span class="token operator">+</span> secondoValore <span class="token operator">+</span> <span class="token string">&quot; \xE8 maggiore del primo valore inserito, &quot;</span> <span class="token operator">+</span> primoValore<span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;i due valori inseriti sono uguali&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Notare che per il costrutto <code>if</code> in python, la <code>condition</code> \xE8 priva di parentesi tonde <code>( )</code> comuni invece a molti altri linguaggi di programmazione; l&#39;operatore <code>:</code> \xE8 usato come terminatore della <code>condition</code> e l&#39;indentazione \xE8 necessaria per racchiudere la porzione di codice condizionato da <code>if</code>.</p><h1 id="lezione-06" tabindex="-1"><a class="header-anchor" href="#lezione-06" aria-hidden="true">#</a> Lezione 06</h1><h2 id="costrutto-iterativo-for" tabindex="-1"><a class="header-anchor" href="#costrutto-iterativo-for" aria-hidden="true">#</a> Costrutto iterativo <code>for</code></h2><p>Un ciclo <code>for</code> viene utilizzato per iterare su una sequenza (che pu\xF2 essere una lista, una tupla, un dizionario, un insieme o una stringa).</p><p>\xC8 meno simile alla <em>keyword</em> <code>for</code> in altri linguaggi di programmazione e funziona pi\xF9 come un metodo iteratore che si trova in altri linguaggi di programmazione orientati agli oggetti.</p>`,18),Rn={href:"https://www.w3schools.com/python/python_for_loops.asp",target:"_blank",rel:"noopener noreferrer"},On=s("w3schools - Python For Loops"),Mn=t(`<p>Sintassi:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token comment">#Sintassi 1:</span>
<span class="token keyword">for</span> target_list <span class="token keyword">in</span> expression_list<span class="token punctuation">:</span>
    <span class="token comment">#code</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Esempio:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">for</span> numero <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>numero<span class="token operator">*</span>numero<span class="token punctuation">)</span>

<span class="token comment"># 1</span>
<span class="token comment"># 4</span>
<span class="token comment"># 9</span>
<span class="token comment"># 16</span>
<span class="token comment"># 25</span>

<span class="token keyword">for</span> frutto <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token string">&quot;banana&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;mela&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;pera&quot;</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>frutto<span class="token punctuation">)</span>

<span class="token comment"># banana</span>
<span class="token comment"># mela</span>
<span class="token comment"># pera</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="indentazione-python" tabindex="-1"><a class="header-anchor" href="#indentazione-python" aria-hidden="true">#</a> Indentazione Python</h2><p>Il linguaggio python, a differenza di altri linguaggi come C/C++, Javascript .. Non utilizza delimitatori di blocco codice come <code>{ }</code> ma si affida alla semplice <strong>indentazione</strong>. Rende quindi indispensabile l&#39;uso di un buon editor di testo per evitare problemi di sintassi o semantica (in alcuni casi nemmeno troppo rari). Non utilizza neanche un terminatore di statement come il classico <code>;</code> ma si affida al carattere <code>a capo</code>. L&#39;interprete python comunque \xE8 in grado di rilevare errori sintattici di indentazione e segnalarlo.</p><h2 id="range-function" tabindex="-1"><a class="header-anchor" href="#range-function" aria-hidden="true">#</a> range() Function</h2><p>Per iterare un insieme di codice un numero di volte specificato, possiamo usare la funzione <code>range ()</code>. La funzione <code>range (number)</code> restituisce una sequenza di numeri, a partire da 0 per impostazione predefinita, incrementa di 1 (per impostazione predefinita) e termina con un numero specificato tramite il parametro <em>number</em>. In realt\xE0 termina con il numero <code>number - 1</code>.<br> La funzione <code>range ()</code> pu\xF2 accettare 1, 2 o 3 parametri:</p><ul><li><code>range(number)</code>: <strong>un parametro</strong>, genera una lista numerica incrementale nel range <code>0 - number-1</code></li><li><code>range(numberStart, numberEnd)</code>: <strong>due parametri</strong>, genera una lista numerica incrementale nel range <code>numberStart - numberEnd-1</code></li><li><code>range(numberStart, numberEnd, step)</code>: <strong>tre parametri</strong>, genera una lista numerica con incremento pari a <code>step</code> nel range <em>massimo</em> <code>numberStart - numberEnd-1</code></li></ul>`,9),Tn={href:"https://www.w3schools.com/python/python_for_loops.asp",target:"_blank",rel:"noopener noreferrer"},Nn=s("w3schools - The range() Function"),Vn=t(`<div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>       <span class="token comment">#[0, 1, 2, 3, 4]</span>
<span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>    <span class="token comment">#[1, 2, 3, 4]</span>
<span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">#[1, 3]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">for</span> target_list <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment">#code</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token comment"># range(number) costruisce una lista da 0 a number-1</span>
<span class="token keyword">for</span> numero <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>numero<span class="token operator">*</span>numero<span class="token punctuation">)</span>

<span class="token comment"># 0</span>
<span class="token comment"># 1</span>
<span class="token comment"># 4</span>
<span class="token comment"># 9</span>
<span class="token comment"># 16</span>

<span class="token keyword">for</span> numero <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>numero<span class="token punctuation">)</span>

<span class="token comment"># 1</span>
<span class="token comment"># 3</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Nel seguente esempio specifico alla funzione <code>print()</code> di non utilizzare il terminatore di default <code>a capo</code> rendendo nullo l&#39;attributo <code>end</code></p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span>end<span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Esempio:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">for</span> numero <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>numero<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;:&quot;</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>numero<span class="token operator">*</span>numero<span class="token punctuation">)</span>

<span class="token comment"># 0:0</span>
<span class="token comment"># 1:1</span>
<span class="token comment"># 2:4</span>
<span class="token comment"># 3:9</span>
<span class="token comment"># 4:16</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="lezione-07" tabindex="-1"><a class="header-anchor" href="#lezione-07" aria-hidden="true">#</a> Lezione 07</h1><h2 id="pypdf2-copia-pdf" tabindex="-1"><a class="header-anchor" href="#pypdf2-copia-pdf" aria-hidden="true">#</a> PyPDF2 - Copia PDF</h2><p>Il seguente script prende in input un pdf &quot;input.pdf&quot; e ne produce una copia sul file &quot;Output.pdf&quot; Faremo uso della propriet\xE0 della classe <em>PdfFileReader</em>:</p><ul><li><code>numPages</code>: Restituisce il numero delle pagine del file pdf dell&#39;istanza (della classe <em>PdfFileReader</em>) si cui si legge la propriet\xE0</li></ul><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">import</span> PyPDF2

pdfInput <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;pdf/input.pdf&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;rb&quot;</span><span class="token punctuation">)</span>

reader1 <span class="token operator">=</span> PyPDF2<span class="token punctuation">.</span>PdfFileReader<span class="token punctuation">(</span>pdfInput<span class="token punctuation">)</span> 

pdfOutput <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">&quot;pdf/Output.pdf&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;wb&quot;</span><span class="token punctuation">)</span>

writer1 <span class="token operator">=</span> PyPDF2<span class="token punctuation">.</span>PdfFileWriter<span class="token punctuation">(</span><span class="token punctuation">)</span> 

<span class="token comment">#Copia delle pagine dell&#39;oggetto (classe) pdf &lt;reader1&gt; nell&#39;oggetto (classe) pdf &lt;writer1&gt;</span>
<span class="token keyword">for</span> numeroPagina <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>reader1<span class="token punctuation">.</span>numPages<span class="token punctuation">)</span><span class="token punctuation">:</span>
    page <span class="token operator">=</span> reader1<span class="token punctuation">.</span>getPage<span class="token punctuation">(</span>numeroPagina<span class="token punctuation">)</span>
    writer1<span class="token punctuation">.</span>addPage<span class="token punctuation">(</span>page<span class="token punctuation">)</span>

writer1<span class="token punctuation">.</span>write<span class="token punctuation">(</span>pdfOutput<span class="token punctuation">)</span>

<span class="token comment">#aChiudo i File</span>
pdfInput<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
pdfOutput<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+b+'" alt=""></p><h2 id="pypdf2-merge-all-pdf" tabindex="-1"><a class="header-anchor" href="#pypdf2-merge-all-pdf" aria-hidden="true">#</a> PyPDF2 - Merge All pdf</h2><p>Il seguente script unisce tutti i file pdf presenti nella root directory salvandoli con un nome stabilito dall&#39;utente. Faremo uso di:</p>',15),Un=n("strong",null,"Modulo os",-1),Zn=s(" \xE8 un modulo che contiene funzioni per interagire con il sistema operativo per la manipolazione di file e processi, "),Wn={href:"https://docs.python.org/3/library/os.html",target:"_blank",rel:"noopener noreferrer"},Qn=s("os \u2014 Miscellaneous operating system interfaces"),$n=s("."),Bn=n("br",null,null,-1),Kn=n("strong",null,"Nota:",-1),Gn=n("br",null,null,-1),Jn=s(" Per questo esercizio importeremo solo il "),jn=n("em",null,"metodo",-1),Hn=s(),Xn=n("code",null,"listdir()",-1),Yn=s(" del modulo os:"),ns=t(`<div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">from</span> os <span class="token keyword">import</span> listdir
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li><p><code>listdir(path)</code>: Metodo del modulo <strong>os</strong>. Elenca file e cartelle specificate nella path-directory come parametro. Se non viene specificato nessun parametro restituisce i file della root-directory. Viene restituita una <strong>lista</strong> <br><a href="w3big.com">Python3 os.listdir () method</a></p></li><li><p><strong>Metodi su stringa</strong><br></p><ul><li><code>endswith(myString)</code>: Restituisce <em>true</em> se la stringa a cui applichiamo il metodo termina con la stringa indicata come parametro, <em>myString</em></li></ul></li></ul><p>Altre funzionalit\xE0 del modulo <strong>PyPDF2</strong>.<br></p>`,3),ss=s("classe "),as=n("code",null,"PdfFileMerger",-1),es=s(": Inizializza un oggetto "),ts=n("strong",null,"PdfFileMerger",-1),os=s(". "),is=n("strong",null,"PdfFileMerger",-1),ps=s(" unisce pi\xF9 PDF in un unico PDF. Restituisce un'istanza della classe "),ls=n("strong",null,"PdfFileMerger",-1),cs=s(", "),rs={href:"https://pythonhosted.org/PyPDF2/PdfFileMerger.html",target:"_blank",rel:"noopener noreferrer"},us=s("PyPDF2 - The PdfFileMerger Class"),ds=s("."),ms=n("li",null,[s("metodo "),n("code",null,"append(myPDF)"),s(" della classe "),n("code",null,"PdfFileMerger"),s(": Concatena tutte le pagine di un oggetto PDF passato come parametro, "),n("em",null,"myPDF"),s(", alla fine del file PDF a cui si applica il metodo")],-1),ks=t(`<p>Riporto lo script completo:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token comment">#Merge all pdf files</span>

<span class="token keyword">from</span> os <span class="token keyword">import</span> listdir
<span class="token keyword">import</span> PyPDF2

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;**********************************************&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Unisco i file pdf presenti in questa directory&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;**********************************************&quot;</span><span class="token punctuation">)</span>

<span class="token comment">#Non devo specificare &lt;os.listdir&gt; poich\xE8 ho spcificato l&#39;importazione &lt;from os import listdir&gt;</span>
<span class="token comment">#Se avessi usato &lt;import os&gt; avrei dovuto scrivere &lt;os.listdir&gt;</span>
<span class="token comment">#listdir restituisce file e cartelle in formato &lt;lista&gt;</span>
listaFiles <span class="token operator">=</span> listdir<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> nomeFile <span class="token keyword">in</span> listaFiles<span class="token punctuation">:</span>
    <span class="token keyword">if</span> nomeFile<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">&#39;.pdf&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>nomeFile<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;\\n&#39;</span><span class="token punctuation">)</span>

<span class="token comment">#chiedo all&#39;utente come vuole chiamare il file di output</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Salvo il risultato con il nome:&quot;</span><span class="token punctuation">)</span>
nomeFileDestinazione <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">#Apro il file in scrittura binaria</span>
PDF_Destinazione <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>nomeFileDestinazione<span class="token punctuation">,</span> <span class="token string">&quot;wb&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;\\n&#39;</span><span class="token punctuation">)</span>

merger <span class="token operator">=</span> PyPDF2<span class="token punctuation">.</span>PdfFileMerger<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Elaborazione di..&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> nomeFile <span class="token keyword">in</span> listaFiles<span class="token punctuation">:</span>
    <span class="token comment">#Elaboro solo i file con estensione &quot;.pdf&quot;</span>
    <span class="token keyword">if</span> nomeFile<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">&#39;.pdf&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment">#stampo il nome del file</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>nomeFile<span class="token punctuation">)</span>
        <span class="token comment">#lo apro in lettura binaria</span>
        pdfFileInput <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>nomeFile<span class="token punctuation">,</span> <span class="token string">&quot;rb&quot;</span><span class="token punctuation">)</span>
        <span class="token comment">#creo un&#39;istanza della classe &lt;PdfFileReader&gt; sul file appena aperto</span>
        PDF_Reader <span class="token operator">=</span> PyPDF2<span class="token punctuation">.</span>PdfFileReader<span class="token punctuation">(</span>pdfFileInput<span class="token punctuation">)</span>
        <span class="token comment">#Appendo il file PDF in coda all&#39;oggetto merger</span>
        merger<span class="token punctuation">.</span>append<span class="token punctuation">(</span>PDF_Reader<span class="token punctuation">)</span>
        <span class="token comment">#chiudo il file aperto</span>
        pdfFileInput<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;\\n&#39;</span><span class="token punctuation">)</span>

<span class="token comment">#Operazione di scrittura</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Scrittura su: &quot;</span> <span class="token operator">+</span> nomeFileDestinazione<span class="token punctuation">)</span>
merger<span class="token punctuation">.</span>write<span class="token punctuation">(</span>PDF_Destinazione<span class="token punctuation">)</span>
PDF_Destinazione<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Finito..&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+f+'" alt=""></p><h1 id="lezione-08" tabindex="-1"><a class="header-anchor" href="#lezione-08" aria-hidden="true">#</a> Lezione 08</h1><h2 id="liste" tabindex="-1"><a class="header-anchor" href="#liste" aria-hidden="true">#</a> Liste</h2><p>Abbiamo gi\xE0 visto implicitamente un&#39;introduzione al tipo lista e in particolare come creare e iterare sugli elementi di una lista attraverso il ciclo <code>for</code> e la funzione <code>range()</code>. Il tipo dato lista \xE8 molto importante nel linguaggio python.</p><p>Le liste sono un tipo di dato utilizzato per memorizzare diversi elementi in una singola variabile.</p><p>Le liste sono uno dei 4 tipi di dati incorporati in Python utilizzati per memorizzare raccolte di dati, gli altri 3 sono Tuple, Set e Dictionary, tutti con qualit\xE0 e utilizzo diversi.</p><p>Vediamo le caratteristiche principali delle liste:</p><ul><li>Le liste possono contenere qualsiasi tipo di dato</li><li>Gli elementi della lista sono indicizzati, il primo elemento ha indice [0], il secondo elemento ha indice [1] .. A differenza della maggior parte dei linguaggi si possono usare anche indici negativi, [-1] si riferisce all&#39;ultimo elemento, [-2] si riferisce al penultimo elemento ecc.</li><li>Gli elementi in una lista sono ordinati e l&#39;ordine \xE8 stabilito dall&#39;indice.</li><li>Dopo la creazione, \xE8 possibile aggiungere elementi, cambiare il valore degli elementi gi\xE0 esistenti o rimuoverli</li><li>Dal momento che le liste sono indicizzate \xE8 possibile avere elementi duplicati</li><li>La funzione <code>len()</code> ritorna il numero degli elementi presenti in una lista</li><li>L&#39;operatore <code>[::]</code> permette lo <em>slicing</em> di liste ovvero la creazione di porzioni di liste a partire dalla lista a cui si applica l&#39;operatore <code>[::]</code></li></ul>',10),vs={href:"https://www.w3schools.com/python/python_lists.asp",target:"_blank",rel:"noopener noreferrer"},bs=s("w3schools - Python Lists"),fs=t(`<h2 id="accesso-agli-elementi-di-una-lista" tabindex="-1"><a class="header-anchor" href="#accesso-agli-elementi-di-una-lista" aria-hidden="true">#</a> Accesso agli elementi di una lista</h2><p>L&#39;accesso agli elementi di una lista si effettua tramite l&#39;operatore <code>[]</code></p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token comment">#indici     0         1       2       3            4</span>
<span class="token comment">#indici    -5        -4      -3      -2           -1</span>
myList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;banana&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;kiwi&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;mela&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;mandarino&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;cachi&quot;</span><span class="token punctuation">]</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>myList<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">#mela</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>myList<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">#cachi</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>myList<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="modifica-del-valore-degli-elementi-in-una-lista" tabindex="-1"><a class="header-anchor" href="#modifica-del-valore-degli-elementi-in-una-lista" aria-hidden="true">#</a> Modifica del valore degli elementi in una lista.</h2><p>Per cambiare il valore degli elementi in una lista si utilizza l&#39;operatore <code>[]</code></p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token comment">#indici     0         1       2       3            4</span>
<span class="token comment">#indici    -5        -4      -3      -2           -1</span>
myList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;banana&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;kiwi&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;mela&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;mandarino&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;cachi&quot;</span><span class="token punctuation">]</span>

myList<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;arancia&quot;</span>
myList<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&quot;pera&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>myList<span class="token punctuation">)</span>

myList<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;mandorla&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;nocciola&quot;</span><span class="token punctuation">]</span> 
<span class="token keyword">print</span><span class="token punctuation">(</span>myList<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="aggiunta-di-elementi-in-una-lista" tabindex="-1"><a class="header-anchor" href="#aggiunta-di-elementi-in-una-lista" aria-hidden="true">#</a> Aggiunta di elementi in una lista</h2><p>Sono disponibili i metodi:</p><ul><li><code>append(elem)</code>: Appende <em>elem</em> in coda alla lista</li><li><code>insert(index, elem)</code>: Inserisce (senza nessun replace) <em>elem</em> alla posizione <em>index</em> facendo scalare di una posizione gli elementi dalla posizione <em>index</em></li><li><code>extend(otherList)</code>: Appende in coda gli elementi della lista passata come parametro, <em>otherList</em></li></ul><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>myList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;banana&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;kiwi&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;mela&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;mandarino&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;cachi&quot;</span><span class="token punctuation">]</span>
myList2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;mandorla&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;nocciola&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;noce&quot;</span><span class="token punctuation">]</span>

myList<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">&quot;anguria&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>myList<span class="token punctuation">)</span> <span class="token comment">#[&#39;banana&#39;, &#39;kiwi&#39;, &#39;mela&#39;, &#39;mandarino&#39;, &#39;cachi&#39;, &#39;anguria&#39;]</span>

myList<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&quot;melone&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>myList<span class="token punctuation">)</span> <span class="token comment">#[&#39;banana&#39;, &#39;kiwi&#39;, &#39;melone&#39;, &#39;mela&#39;, &#39;mandarino&#39;, &#39;cachi&#39;, &#39;anguria&#39;]</span>

myList<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>myList2<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>myList<span class="token punctuation">)</span> <span class="token comment">#[&#39;banana&#39;, &#39;kiwi&#39;, &#39;melone&#39;, &#39;mela&#39;, &#39;mandarino&#39;, &#39;cachi&#39;, &#39;anguria&#39;, &#39;mandorla&#39;, &#39;nocciola&#39;, &#39;noce&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="rimozione-di-elementi-in-una-lista" tabindex="-1"><a class="header-anchor" href="#rimozione-di-elementi-in-una-lista" aria-hidden="true">#</a> Rimozione di elementi in una lista</h2><p>Sono disponibili i metodi:</p><ul><li><code>remove(elem)</code> : Toglie <em>elem</em> dalla lista</li><li><code>pop(?index)</code>: Toglie l&#39;elemento corrispondente all&#39;indice <em>index</em> passato come parametro opzionale. Se non viene passato nessun parametro toglie l&#39;ultimo elemento. E&#39; possibile ottenere questo risultato anche con il comando <code>del</code>, specificando l&#39;elemento, <code>del myList[index]</code></li><li><code>clear()</code>: Svuota la lista. La lista esiste ma \xE8 vuota. E&#39; possibile ottenere questo risultato anche con il comando <code>del</code> specificando il nome della lista <code>del myList</code> ma in questo caso elimina anche l&#39;identificatore</li></ul><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>myList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;banana&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;kiwi&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;melone&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;mela&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;mandarino&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;cachi&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;anguria&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;mandorla&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;nocciola&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;noce&#39;</span><span class="token punctuation">]</span>

myList<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">&quot;mandarino&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>myList<span class="token punctuation">)</span> <span class="token comment">#[&#39;banana&#39;, &#39;kiwi&#39;, &#39;melone&#39;, &#39;mela&#39;, &#39;cachi&#39;, &#39;anguria&#39;, &#39;mandorla&#39;, &#39;nocciola&#39;, &#39;noce&#39;]</span>

myList<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>myList<span class="token punctuation">)</span> <span class="token comment">#[&#39;banana&#39;, &#39;kiwi&#39;, &#39;mela&#39;, &#39;cachi&#39;, &#39;anguria&#39;, &#39;mandorla&#39;, &#39;nocciola&#39;, &#39;noce&#39;]</span>
myList<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>myList<span class="token punctuation">)</span> <span class="token comment">#[&#39;banana&#39;, &#39;kiwi&#39;, &#39;mela&#39;, &#39;cachi&#39;, &#39;anguria&#39;, &#39;mandorla&#39;, &#39;nocciola&#39;]</span>
<span class="token keyword">del</span> myList<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> 
<span class="token keyword">print</span><span class="token punctuation">(</span>myList<span class="token punctuation">)</span> <span class="token comment">#[&#39;kiwi&#39;, &#39;mela&#39;, &#39;cachi&#39;, &#39;anguria&#39;, &#39;mandorla&#39;, &#39;nocciola&#39;]</span>

myList<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span> 
<span class="token keyword">print</span><span class="token punctuation">(</span>myList<span class="token punctuation">)</span> <span class="token comment">#[]</span>

myList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;banana&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;kiwi&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;melone&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;mela&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;mandarino&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;cachi&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;anguria&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;mandorla&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;nocciola&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;noce&#39;</span><span class="token punctuation">]</span>
<span class="token keyword">del</span> myList
<span class="token keyword">print</span><span class="token punctuation">(</span>myList<span class="token punctuation">)</span> <span class="token comment">#NameError: name &#39;myList&#39; is not defined</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="creazione-di-sotto-liste-slicing" tabindex="-1"><a class="header-anchor" href="#creazione-di-sotto-liste-slicing" aria-hidden="true">#</a> Creazione di sotto liste, <strong>slicing</strong> <br></h2><p>Sintassi:<br><code>mySubList = myList[?startIndex: ?endIndex: ?Step]</code>: Ritorna una sotto lista a partire dalla lista a cui si applica lo slicing (<em>myList</em>). L&#39;operatore <code>[]</code> pu\xF2 ricevere tre parametri opzionali separati da <code>:</code>. Il primo rappresenta l&#39;indice di partenza (incluso), il secondo l&#39;indice di fine (non incluso) e il terzo il passo. Se il primo parametro non \xE8 specificato si assume <code>0</code> come valore di partenza. Se il secondo parametro non \xE8 specificato si assume <code>len(myList) - 1</code> come valore di fine cio\xE8 l&#39;ultimo elemento della lista. Se il terzo parametro non \xE8 specificato si assume un incremento positivo unitario</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token comment">#indici     0         1       2       3            4</span>
<span class="token comment">#indici    -5        -4      -3      -2           -1</span>
myList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;banana&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;kiwi&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;mela&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;mandarino&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;cachi&quot;</span><span class="token punctuation">]</span>

mySubList <span class="token operator">=</span> myList<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>mySubList<span class="token punctuation">)</span>  <span class="token comment">#[&#39;kiwi&#39;, &#39;mela&#39;, &#39;mandarino&#39;, &#39;cachi&#39;]</span>
mySubList <span class="token operator">=</span> myList<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>mySubList<span class="token punctuation">)</span> <span class="token comment">#[&#39;mandarino&#39;, &#39;cachi&#39;]</span>

mySubList <span class="token operator">=</span> myList<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>mySubList<span class="token punctuation">)</span> <span class="token comment">#[&#39;mela&#39;, &#39;mandarino&#39;]</span>

mySubList <span class="token operator">=</span> myList<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>mySubList<span class="token punctuation">)</span> <span class="token comment">#[&#39;banana&#39;, &#39;mela&#39;, &#39;cachi&#39;]</span>

<span class="token comment">#Restituisce una copia &lt;non profonda&gt; di una lista</span>
<span class="token comment">#Non valido per liste annidate</span>
mySubList <span class="token operator">=</span> myList<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>mySubList<span class="token punctuation">)</span> <span class="token comment">#[&quot;banana&quot;, &quot;kiwi&quot;, &quot;mela&quot;, &quot;mandarino&quot;, &quot;cachi&quot;]</span>

<span class="token comment">#Ordinamento inverso</span>
mySubList <span class="token operator">=</span> myList<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> 
<span class="token keyword">print</span><span class="token punctuation">(</span>mySubList<span class="token punctuation">)</span> <span class="token comment">#[&#39;cachi&#39;, &#39;mandarino&#39;, &#39;mela&#39;, &#39;kiwi&#39;, &#39;banana&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="lezione-09" tabindex="-1"><a class="header-anchor" href="#lezione-09" aria-hidden="true">#</a> Lezione 09</h1><h2 id="copia-di-liste" tabindex="-1"><a class="header-anchor" href="#copia-di-liste" aria-hidden="true">#</a> Copia di Liste</h2><p>Abbiamo visto nel paragrafo precedente che per la copia di liste \xE8 sufficiente utilizzare l&#39;operatore <code>[:]</code> ma che non vale per liste annidate. In questa lezione approfondiremo l&#39;operazione di copia di elementi.</p><p>Copia semplice, valida per liste non annidate:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>myList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;banana&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;kiwi&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;mela&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;mandarino&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;cachi&quot;</span><span class="token punctuation">]</span>
myList2 <span class="token operator">=</span> myList<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>myList<span class="token punctuation">)</span>  <span class="token comment">#[&#39;banana&#39;, &#39;kiwi&#39;, &#39;mela&#39;, &#39;mandarino&#39;, &#39;cachi&#39;]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>myList2<span class="token punctuation">)</span> <span class="token comment">#[&#39;banana&#39;, &#39;kiwi&#39;, &#39;mela&#39;, &#39;mandarino&#39;, &#39;cachi&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Cosa succede se eseguo la copia tramite il semplice assegnamento?</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>myList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;banana&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;kiwi&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;mela&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;mandarino&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;cachi&quot;</span><span class="token punctuation">]</span>
myList2 <span class="token operator">=</span> myList

<span class="token keyword">print</span><span class="token punctuation">(</span>myList<span class="token punctuation">)</span>  <span class="token comment">#[&#39;banana&#39;, &#39;kiwi&#39;, &#39;mela&#39;, &#39;mandarino&#39;, &#39;cachi&#39;]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>myList2<span class="token punctuation">)</span> <span class="token comment">#[&#39;banana&#39;, &#39;kiwi&#39;, &#39;mela&#39;, &#39;mandarino&#39;, &#39;cachi&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Sfruttando quindi l&#39;operatore di assegnamento <code>=</code> non ottengo una copia dei valori ma una copia dei riferimenti. In pratica in questo modo <em>myList</em> e <em>myList2</em> condividono gli stessi dati. Se modifico uno modifico anche l&#39;altro</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>myList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;banana&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;kiwi&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;mela&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;mandarino&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;cachi&quot;</span><span class="token punctuation">]</span>
myList2 <span class="token operator">=</span> myList

<span class="token comment">#Togliendo l&#39;elemento da &quot;myList&quot; lo tolgo anche da &quot;myList2&quot; perch\xE8 condividono gli stessi elementi</span>
myList<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">&quot;banana&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>myList<span class="token punctuation">)</span>  <span class="token comment">#[&#39;kiwi&#39;, &#39;mela&#39;, &#39;mandarino&#39;, &#39;cachi&#39;]</span>
<span class="token comment"># !!!</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>myList2<span class="token punctuation">)</span> <span class="token comment">#[&#39;kiwi&#39;, &#39;mela&#39;, &#39;mandarino&#39;, &#39;cachi&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Ci\xF2 non accade con la copia poich\xE8 diventano due liste indipendenti:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>myList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;banana&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;kiwi&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;mela&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;mandarino&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;cachi&quot;</span><span class="token punctuation">]</span>
myList2 <span class="token operator">=</span> myList<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span>

myList<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">&quot;banana&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>myList<span class="token punctuation">)</span>  <span class="token comment">#[&#39;kiwi&#39;, &#39;mela&#39;, &#39;mandarino&#39;, &#39;cachi&#39;]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>myList2<span class="token punctuation">)</span> <span class="token comment">#[&#39;banana&#39;, &#39;kiwi&#39;, &#39;mela&#39;, &#39;mandarino&#39;, &#39;cachi&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Attenzione!</strong> Per liste pi\xF9 complicate come liste annidate l&#39;operatore <code>[:]</code> non pu\xF2 essere utilizzato per la copia perch\xE8 effettuerebbe una copia per riferimento degli elementi annidati. In generale per effettuare una copia ricorsiva e profonda \xE8 necessario utilizzare la funzione <code>deepcopy()</code> del modulo <code>copy</code>.</p><p>Per liste annidate l&#39;operatore <code>[:]</code> fallisce:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>myList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;banana&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;kiwi&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;mela&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;cachi&quot;</span><span class="token punctuation">]</span>
myList2 <span class="token operator">=</span> myList<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span>

myList<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">&quot;banana&quot;</span><span class="token punctuation">)</span>
myList2<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">12</span>

<span class="token comment"># !!! la scrittura su myList2 ha scritto anche myList perch\xE8 la lista annidata \xE8 stata copiata per riferimento </span>
<span class="token keyword">print</span><span class="token punctuation">(</span>myList<span class="token punctuation">)</span>  <span class="token comment">#[&#39;kiwi&#39;, &#39;mela&#39;, [12, 2], &#39;cachi&#39;]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>myList2<span class="token punctuation">)</span> <span class="token comment">#&#39;banana&#39;, &#39;kiwi&#39;, &#39;mela&#39;, [12, 2], &#39;cachi&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="deepcopy" tabindex="-1"><a class="header-anchor" href="#deepcopy" aria-hidden="true">#</a> deepcopy()</h2><p>Per la copia di liste e qualsiasi altro oggetto \xE8 possibile ed \xE8 consigliabile utilizzare una funzione <code>deepcopy()</code> del modulo <code>copy</code> che esegue una copia profonda quindi considera anche oggetti e liste annidate</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">import</span> copy

myList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;banana&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;kiwi&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;mela&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;mandarino&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;cachi&quot;</span><span class="token punctuation">]</span>
myList2 <span class="token operator">=</span> copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>myList<span class="token punctuation">)</span>

myList<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">&quot;banana&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>myList<span class="token punctuation">)</span>  <span class="token comment">#[&#39;kiwi&#39;, &#39;mela&#39;, &#39;mandarino&#39;, &#39;cachi&#39;]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>myList2<span class="token punctuation">)</span> <span class="token comment">#[&#39;banana&#39;, &#39;kiwi&#39;, &#39;mela&#39;, &#39;mandarino&#39;, &#39;cachi&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>La funzione <code>deepcopy()</code> \xE8 l&#39;unica che eseegue in modo affidabile la copia di elementi considerando eventuali elementi annidati.</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">import</span> copy
myList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;banana&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;kiwi&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;mela&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;cachi&quot;</span><span class="token punctuation">]</span>
myList2 <span class="token operator">=</span> copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>myList<span class="token punctuation">)</span>

myList<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">&quot;banana&quot;</span><span class="token punctuation">)</span>
myList2<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">12</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>myList<span class="token punctuation">)</span>  <span class="token comment">#[&#39;kiwi&#39;, &#39;mela&#39;, [1, 2], &#39;cachi&#39;]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>myList2<span class="token punctuation">)</span> <span class="token comment">#[&#39;banana&#39;, &#39;kiwi&#39;, &#39;mela&#39;, [12, 2], &#39;cachi&#39;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="lezione-10" tabindex="-1"><a class="header-anchor" href="#lezione-10" aria-hidden="true">#</a> Lezione 10</h1><h2 id="le-stringe" tabindex="-1"><a class="header-anchor" href="#le-stringe" aria-hidden="true">#</a> Le stringe</h2><p><strong>Le stringhe sono un tipo di dato immutabile in python</strong> <br></p><p>Questo significa che la copia di stringhe pu\xF2 essere fatta attraverso l&#39;assegnamento tra i nomi (contrariamente a quanto accade per altri linguaggi come C++) poich\xE8 quando viene creata una copia tramite l&#39;assegnamento non viene copiato il riferimento della stringa ma l&#39;intero oggetto stringa.</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>s1 <span class="token operator">=</span> <span class="token string">&quot;ciao&quot;</span>
s2 <span class="token operator">=</span> s1
s2 <span class="token operator">=</span> <span class="token string">&quot;ciaociao&quot;</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span> <span class="token comment">#ciaociao</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span> <span class="token comment">#ciao</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Ecco una dimostrazione approfondita andando ad scavare tra gli indirizzi in memoria con la funzione <code>id</code></p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>s1 <span class="token operator">=</span> <span class="token string">&quot;ciao&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#140440511029104</span>
s2 <span class="token operator">=</span> s1
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#140440511029104</span>
s2 <span class="token operator">=</span> <span class="token string">&quot;ciaociao&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#140440511029168</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span> <span class="token comment">#ciaociao</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span> <span class="token comment">#ciao</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Attenzione</strong> Eseguendo la copia <code>s2 = s1</code> ancora non si assegna ad <code>s2</code> un nuovo indirizzo in memoria per motivi di efficienza. Lo si assegna quando ad <code>s2</code> si assegna un nuovo valore</p><h2 id="interpolazione-di-stringhe-metodo-format" tabindex="-1"><a class="header-anchor" href="#interpolazione-di-stringhe-metodo-format" aria-hidden="true">#</a> Interpolazione di stringhe - Metodo <code>format()</code></h2>`,45),gs=s("Il metodo "),hs=n("code",null,"format()",-1),ys=s(" applicabile alle stringhe consente di inserire espressioni valutabili all'interno di stringhe "),qs={href:"https://www.w3schools.com/python/ref_string_format.asp",target:"_blank",rel:"noopener noreferrer"},ws=s("w3schools - Python String format() Method"),_s=s("."),zs=t(`<p>Il metodo <code>format()</code> formatta i valori specificati e li inserisce all&#39;interno del segnaposto della stringa. Il segnaposto viene definito utilizzando le parentesi graffe: {}.</p><p>Esempio:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token comment">#sintassi 1</span>
txt <span class="token operator">=</span> <span class="token string">&quot;1Kg di sale da cucina a solo {price} euro!&quot;</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>txt<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>price <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#1Kg di sale da cucina a solo 2 euro!</span>

<span class="token comment">#sintassi 2</span>
txt <span class="token operator">=</span> <span class="token string">&quot;1Kg di sale da cucina a solo {0} euro! Rimasti {1} pezzi&quot;</span> 
<span class="token keyword">print</span><span class="token punctuation">(</span>txt<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#1Kg di sale da cucina a solo 2 euro! Rimasti 500 pezzi</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Esiste anche una sintassi leggermente diversa:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>myList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;dentista&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;17:00&quot;</span><span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Evento: </span><span class="token interpolation"><span class="token punctuation">{</span>myList<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token string"> - Ora: </span><span class="token interpolation"><span class="token punctuation">{</span>myList<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token string"> &quot;</span></span><span class="token punctuation">)</span> <span class="token comment">#Evento: dentista - Ora: 17:00 </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="lezione-11" tabindex="-1"><a class="header-anchor" href="#lezione-11" aria-hidden="true">#</a> Lezione 11</h1><h2 id="pypdf2-merge-all-pdf-v2" tabindex="-1"><a class="header-anchor" href="#pypdf2-merge-all-pdf-v2" aria-hidden="true">#</a> PyPDF2 - Merge All pdf v2</h2><p>Questa \xE8 una versione migliorata dello script <em>Merge All pdf</em>. Aggiunge dei controlli sull&#39;estensione del file e sulla natura del file. Controlla infatti se un file termina con formati &quot;strani&quot; come &quot;.pdF&quot;, &quot;PDf&quot; considerandoli comunque validi e controlla eventuali falsi file trappola come cartella che termina con estensione &quot;.pdf&quot;. <br> Faremo uso di:</p><ul><li><code>os.path.isfile(path+file)</code>: Ritorna <em>true</em> se il file specificato come parametro (eventualmente con un path relativo o assoluto) \xE8 realmente un file.</li><li>Metodo su <strong>stringhe</strong> <code>.upper()</code>: Ritorna una <strong>copia</strong> della stringa a cui si applica il metodo in caratteri maiscoli</li><li><strong>chaining</strong> condition <code>and</code>: Permette la concatenazione di condizioni logiche. Ritorna <em>true</em> se tutte le condizioni concatenate sono <em>true</em></li></ul><p>Script completo e migliorato</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">import</span> PyPDF2
<span class="token keyword">import</span> os

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;**********************************************&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Unisco i file pdf presenti in questa directory&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;**********************************************&quot;</span><span class="token punctuation">)</span>

listaFiles <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> nomeFile <span class="token keyword">in</span> listaFiles<span class="token punctuation">:</span>
    <span class="token keyword">if</span> nomeFile<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">&#39;.pdf&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>nomeFile<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;\\n&#39;</span><span class="token punctuation">)</span>

<span class="token comment">#chiedo all&#39;utente come vuole chiamare il file di output</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Salvo il risultato con il nome:&quot;</span><span class="token punctuation">)</span>
nomeFileDestinazione <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">#Apro il file in scrittura binaria</span>
PDF_Destinazione <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>nomeFileDestinazione<span class="token punctuation">,</span> <span class="token string">&quot;wb&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;\\n&#39;</span><span class="token punctuation">)</span>

merger <span class="token operator">=</span> PyPDF2<span class="token punctuation">.</span>PdfFileMerger<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Elaborazione di..&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> nomeFile <span class="token keyword">in</span> listaFiles<span class="token punctuation">:</span>
    <span class="token comment">#Elaboro solo i file con estensione &quot;.pdf&quot; o &quot;PDF&quot; o &quot;PdF&quot; ..</span>
    <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span>nomeFile<span class="token punctuation">)</span> <span class="token keyword">and</span> nomeFile<span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">&#39;.PDF&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment">#stampo il nome del file</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>nomeFile<span class="token punctuation">)</span>
        <span class="token comment">#lo apro in lettura binaria</span>
        pdfFileInput <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span>nomeFile<span class="token punctuation">,</span> <span class="token string">&quot;rb&quot;</span><span class="token punctuation">)</span>
        <span class="token comment">#creo un&#39;istanza della classe &lt;PdfFileReader&gt; sul file appena aperto</span>
        PDF_Reader <span class="token operator">=</span> PyPDF2<span class="token punctuation">.</span>PdfFileReader<span class="token punctuation">(</span>pdfFileInput<span class="token punctuation">)</span>
        <span class="token comment">#Appendo il file PDF in coda all&#39;oggetto merger</span>
        merger<span class="token punctuation">.</span>append<span class="token punctuation">(</span>PDF_Reader<span class="token punctuation">)</span>
        <span class="token comment">#chiudo il file aperto</span>
        pdfFileInput<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;\\n&#39;</span><span class="token punctuation">)</span>

<span class="token comment">#Operazione di scrittura</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Scrittura su: &quot;</span> <span class="token operator">+</span> nomeFileDestinazione<span class="token punctuation">)</span>
merger<span class="token punctuation">.</span>write<span class="token punctuation">(</span>PDF_Destinazione<span class="token punctuation">)</span>
PDF_Destinazione<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Finito..&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="lezione-12" tabindex="-1"><a class="header-anchor" href="#lezione-12" aria-hidden="true">#</a> Lezione 12</h1><h2 id="introduzione-alla-manipolazione-dei-docx" tabindex="-1"><a class="header-anchor" href="#introduzione-alla-manipolazione-dei-docx" aria-hidden="true">#</a> Introduzione alla manipolazione dei docx</h2><p>Con il seguente script inizieremo a manipolare i docx Da terminale puoi installare il modulo per la manipolazione dei docx con il comando:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>pip <span class="token function">install</span> python-docx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Importa il modulo &quot;python-docx&quot; all&#39;interno del tuo script con:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">import</span> docx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,17),xs=s('La documentazione ufficiale del modulo "python-docx" la puoi trovare su '),Ls={href:"https://python-docx.readthedocs.io/en/latest/",target:"_blank",rel:"noopener noreferrer"},Ps=s("docx - documentazione"),Fs=s("."),Is=t(`<p>Del modulo &quot;python-docx&quot; utilizzeremo:</p><ul><li><p><code>docx.Document(docxFile)</code>: Chiama il costruttore della classe <code>Document</code> passando come parametro di inizializzazione il file &quot;docx&quot; che intendiamo elaborare. Ritorna un&#39;istanza della classe <code>Document</code></p></li><li><p>Metodo <code>sections</code> della classe <code>Document</code>: applicato a un&#39;istanza della classe <code>Document</code> restituisce le sezioni del documento &quot;docx&quot;-</p></li><li><p>Metodo <code>paragraphs</code> della classe <code>Document</code>: applicato a un&#39;istanza della classe <code>Document</code> restituisce una <strong>lista dell&#39;oggetto</strong> <code>Paragraph</code></p></li><li><p>Metodo <code>text</code> della classe <code>Paragraph</code>: applicato a un&#39;istanza della classe <code>Paragraph</code> restituisce il testo di un paragrafo</p></li></ul><p>Utilizzeremo anche l&#39;operatore <code>*</code> su <strong>stringa</strong> che permette di generare una ripetizione della stringa a cui si applica l&#39;operatore.</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;ciao &quot;</span><span class="token operator">*</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token string">&quot;!&quot;</span><span class="token punctuation">)</span> <span class="token comment">#ciao ciao !</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Script completo:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token comment">#Manipolazione docx</span>
<span class="token keyword">import</span> docx

divina <span class="token operator">=</span> docx<span class="token punctuation">.</span>Document<span class="token punctuation">(</span><span class="token string">&quot;divina1.docx&quot;</span><span class="token punctuation">)</span>

sezioni <span class="token operator">=</span> divina<span class="token punctuation">.</span>sections

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;il documento contine:&quot;</span><span class="token punctuation">)</span>

<span class="token comment">#Utile quando ci sono diversi valori da valutare</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;- {0} sezioni&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>sezioni<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#altrenativa &gt;&gt;&gt; print(str( len(sezioni) ) + &quot; sezioni&quot; ) </span>


paragrafi <span class="token operator">=</span> divina<span class="token punctuation">.</span>paragraphs
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;- {0} paragrafi&quot;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>paragrafi<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#4 sezioni</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;\\nStampo i paragrafi..&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;-&quot;</span><span class="token operator">*</span><span class="token number">50</span><span class="token punctuation">)</span>
<span class="token comment">#Per ogni elemento p estratto dalla lista paragrafi..</span>
<span class="token keyword">for</span> p <span class="token keyword">in</span> paragrafi<span class="token punctuation">:</span>
    <span class="token comment">#p.text restituisce il testo di un paragrafo</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>text<span class="token punctuation">)</span>
    <span class="token comment">#questo metodo su stringa genera una ripetizione </span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;-&quot;</span><span class="token operator">*</span><span class="token number">50</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="lezione-13" tabindex="-1"><a class="header-anchor" href="#lezione-13" aria-hidden="true">#</a> Lezione 13</h1><h2 id="python-while" tabindex="-1"><a class="header-anchor" href="#python-while" aria-hidden="true">#</a> Python <code>while()</code></h2><p>Con il ciclo while possiamo eseguire un insieme di istruzioni fintanto che una condizione \xE8 vera.</p>`,9),Es={href:"https://www.w3schools.com/python/python_while_loops.asp",target:"_blank",rel:"noopener noreferrer"},Ds=s("w3schools - Python While Loops"),Ss=t(`<p>Sintassi:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">while</span> condition<span class="token punctuation">:</span>
    <span class="token comment">#code</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>Esempio:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>i <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">:</span>    <span class="token comment">#1 &lt; 6, true   #2 &lt; 6, true   #3 &lt; 6, true   #4 &lt; 6, true    #5 &lt; 6, true    #6 &lt; 6, false -&gt; exit</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token comment">#1             #2             #3             #4              #5                </span>
    i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>   <span class="token comment">#i = 2         #i = 3         #i = 4         #i = 5          #i = 6          </span>

<span class="token comment"># 1</span>
<span class="token comment"># 2</span>
<span class="token comment"># 3</span>
<span class="token comment"># 4</span>
<span class="token comment"># 5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="comando-break" tabindex="-1"><a class="header-anchor" href="#comando-break" aria-hidden="true">#</a> Comando <code>break</code></h2><p>Con l&#39;istruzione <code>break</code> possiamo interrompere il ciclo anche se la condizione while \xE8 vera:</p><p>Sintassi:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">while</span> condition<span class="token punctuation">:</span>
    <span class="token comment">#code</span>
    <span class="token comment">#code</span>
    <span class="token comment">#..</span>
    <span class="token keyword">break</span> <span class="token comment">#esce</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Esempio:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>i <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">:</span>    <span class="token comment">#1 &lt; 6, true   #2 &lt; 6, true   </span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token comment">#1             #2                          </span>
    i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>   <span class="token comment">#i = 2         #i = 3         </span>
    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>  <span class="token comment">#i = 2, false  #i = 3, true -&gt; exit</span>
        <span class="token keyword">break</span>
            
<span class="token comment"># 1</span>
<span class="token comment"># 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Con i cicli c&#39;\xE8 sempre da tenere in considerazione <strong>quando</strong> viene effettuato il controllo delle condizioni di uscita ed entrata del ciclo e la sequenza con cui vengono eseguite le istruzioni all&#39;interno del ciclo. Leggendo l&#39;esempio di sopra non \xE8 chiaro se il programmatore con la condizione <code>i == 3</code> vuole che venga stampato il numero <code>3</code> oppure no. Un&#39;ottima strategia \xE8 quella di inserire tutte le condizioni di uscita del ciclo all&#39;inizio ed eventuali istruzioni di controllo ciclo alla fine. Al centro del ciclo andranno tutte le istruzioni che verranno eseguite nel caso <em>standard</em></p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>i <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">:</span>    <span class="token comment">#1 &lt; 6, true   #2 &lt; 6, true   #3 &lt; 6</span>
    <span class="token comment">#Condizione di uscita ciclo</span>
    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>  <span class="token comment">#i = 1, false  #i = 2, false  #i = 3, true -&gt; exit</span>
        <span class="token keyword">break</span>  
    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token comment">#1             #2     </span>
    <span class="token comment">#Condizione di controllo ciclo                     </span>
    i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>   <span class="token comment">#i = 2         #i = 3         </span>
            
<span class="token comment"># 1</span>
<span class="token comment"># 2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="comando-continue" tabindex="-1"><a class="header-anchor" href="#comando-continue" aria-hidden="true">#</a> Comando <code>continue</code></h2><p>Con l&#39;istruzione <code>continue</code> possiamo interrompere l&#39;iterazione corrente e continuare con la successiva</p><p>Sintassi:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">while</span> condition<span class="token punctuation">:</span>
    <span class="token comment">#code</span>
    <span class="token comment">#code</span>
    <span class="token comment">#..</span>
    <span class="token keyword">continue</span> <span class="token comment">#esce</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Esempio</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>i <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">while</span> i <span class="token operator">&lt;</span> <span class="token number">6</span><span class="token punctuation">:</span>                 <span class="token comment">#1 &lt; 6, true   #2 &lt; 6, true   #3 &lt; 6, true   #4 &lt; 6, true   #5 &lt; 6, true   #6 &lt; 6, false -&gt; exit</span>
    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>               <span class="token comment">#i = 1, false  #i = 2, false  #i = 3, true   #i = 4, false  #i = 5, false </span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Numero &quot;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span>                               <span class="token comment">#Numero 3</span>
        i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>                                          <span class="token comment">#i = 4</span>
        <span class="token keyword">continue</span>                                           <span class="token comment">#execute</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>                 <span class="token comment">#1             #2                            #4             #5                   </span>
    i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>                <span class="token comment">#i = 2         #i = 3                        #i = 4         #i = 5         #i = 6         </span>
            
<span class="token comment"># 1</span>
<span class="token comment"># 2</span>
<span class="token comment"># Numero 3</span>
<span class="token comment"># 4</span>
<span class="token comment"># 5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="alcune-considerazioni-finali" tabindex="-1"><a class="header-anchor" href="#alcune-considerazioni-finali" aria-hidden="true">#</a> Alcune considerazioni finali</h2><p>Python ha due comandi di loop primitivi:</p><ul><li><code>while</code> loop</li><li><code>for</code> loop</li></ul><p>E&#39; normale chiedersi quando usare uno e quando usare l&#39;altro.. Riporto quindi una serie di caratteristiche dei due cicli iterativi in Python</p><ul><li><code>for</code> loop \xE8 un ciclo enumerativo. Andrebbe utilizzato quando \xE8 noto a priori il numero di iterazioni totali</li><li><code>while</code> loop \xE8 un ciclo indefinito. Andrebbe utilizzato quando non \xE8 noto a priori il numero di iterazioni totali</li><li>I comandi <code>break</code> e <code>continue</code> possono essere utilizzati indistintamente sia sul ciclo <code>for</code> che sul ciclo <code>while</code></li></ul><h1 id="lezione-14" tabindex="-1"><a class="header-anchor" href="#lezione-14" aria-hidden="true">#</a> Lezione 14</h1><h2 id="esercizio-asta-online-v1" tabindex="-1"><a class="header-anchor" href="#esercizio-asta-online-v1" aria-hidden="true">#</a> Esercizio Asta online v1</h2><p>Il seguente script vuole simulare l&#39;andamento di un&#39;asta online con la seguente regola:</p><ul><li>L&#39;asta verr\xE0 aggiudicata da chi avr\xE0 fatto un&#39;offerta la pi\xF9 vicina alla media delle offerte degli altri</li></ul><p>L&#39;utente dovr\xE0 inserire un&#39;offerta in <em>bit coin</em> e una <em>email</em> che rappresenter\xE0 l&#39;identificativo. E&#39; consentita un&#39;unica offerta per utente! In questa prima parte ci occuperemo dell&#39;acquisizione dati da tastiera e della generazione di una struttura dati adeguata.</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>offerte <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

<span class="token comment">#dato booleano di controllo ciclo</span>
altre_offerte <span class="token operator">=</span> <span class="token boolean">True</span>

<span class="token keyword">while</span> altre_offerte<span class="token punctuation">:</span>
    <span class="token comment">#offerta contiene l&#39;offerte in bitcoin</span>
    offerta <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;Inserisci l\`offerta pervenuta (0 per terminare): &quot;</span><span class="token punctuation">)</span>

    <span class="token comment">#Converto il dato ricevuto da tastiera in intero</span>
    offerta <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>offerta<span class="token punctuation">)</span>

    <span class="token comment">#Il valore &quot;0&quot; \xE8 il terminatore</span>
    <span class="token keyword">if</span> offerta <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
        altre_offerte <span class="token operator">=</span> <span class="token boolean">False</span>
        <span class="token keyword">continue</span>

    
    <span class="token keyword">if</span> offerta <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Non possono essere fatte offerte negative!&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">continue</span>

    <span class="token comment">#Se l&#39;offerta supera i controlli chiedo l&#39;email</span>
    email <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;Inserire l\`email dell\`offerente: &quot;</span><span class="token punctuation">)</span>

    <span class="token comment">#Inserisco la coppia email-offerta nella lista delle offerte</span>
    offerte<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>email<span class="token punctuation">,</span> offerta<span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Le offerte valide sono:&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>offerte<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+g+'" alt=""></p><p>Che cosa succede se l&#39;utente inserisce dei valori di input non atesi? Ad esempio, invece che inserire un numero inserisce una stringa o qualche carattere non previsto?</p><p><img src="'+h+'" alt=""></p><p>Vedremo nel capito successivo come trattare questi errori tramite il costrutto <code>try Except</code></p><h1 id="lezione-15" tabindex="-1"><a class="header-anchor" href="#lezione-15" aria-hidden="true">#</a> Lezione 15</h1><h2 id="costrutto-try-except" tabindex="-1"><a class="header-anchor" href="#costrutto-try-except" aria-hidden="true">#</a> Costrutto <code>try Except</code></h2><p>Quando si verifica un errore (o un&#39;eccezione), Python normalmente si ferma e genera un messaggio di errore.</p>',36),As={href:"https://www.w3schools.com/python/python_try_except.asp",target:"_blank",rel:"noopener noreferrer"},Cs=s("w3schools - Python Try Except"),Rs=t(`<p>Nell&#39;esempio chiedo all&#39;utente l&#39;inserimento di un numero intero.. Fintanto che l&#39;utente inserisce numeri interi tutto funziona correttamente ma quando per sbaglio l&#39;utente inserisce un carattere non valido, un numero decimale o altro, che succede?</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;inserisci un numero intero..&quot;</span><span class="token punctuation">)</span>
    x <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> x <span class="token operator">==</span> <span class="token number">0</span>
        <span class="token keyword">break</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>

<span class="token comment">#input() = 1</span>
<span class="token comment">#1</span>
<span class="token comment">#input() = 2</span>
<span class="token comment">#2</span>
<span class="token comment">#input() = dd</span>
<span class="token comment">#</span>
<span class="token comment">#Traceback (most recent call last):</span>
<span class="token comment">#  File &quot;test.py&quot;, line 3, in &lt;module&gt;</span>
<span class="token comment">#   x = int(input())</span>
<span class="token comment">#ValueError: invalid literal for int() with base 10: &#39;dd&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+y+`" alt=""></p><p>Inserendo la stringa <code>&quot;dd&quot;</code> la conversione esplicita <code>int()</code> fallisce e restituisce un errore:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token comment">#Traceback (most recent call last):</span>
<span class="token comment">#  File &quot;test.py&quot;, line 3, in &lt;module&gt;</span>
<span class="token comment">#   x = int(input())</span>
<span class="token comment">#ValueError: invalid literal for int() with base 10: &#39;dd&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>L&#39;errore \xE8 di tipo <code>ValueError</code> e la descrizione \xE8: <code>invalid literal for int() with base 10: &#39;dd&#39;</code> che significa che la costante letterale <code>dd</code> inserita non \xE8 un tipo di dato valido per la conversione in base 10, cio\xE8 in un numero decimale.</p><p><strong>Come gestisco queste situazioni di errore?</strong> Il costrutto <code>try Except</code> permette la gestione di queste situazioni.</p><p>Sintassi:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">try</span><span class="token punctuation">:</span>
    <span class="token comment">#code1</span>
<span class="token keyword">except</span> <span class="token comment">#typeError:</span>
    <span class="token comment">#code2</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Significa: <em>prova</em> (try) ad eseguire <code>code1</code>, se rilevi un&#39;eccezione di tipo <code>typeError</code> esegui <code>code2</code> ed &quot;ignora&quot; <code>code1</code> ovvero fai finta che <code>code1</code> non sia mai stato eseguito. Se non rilevi nessun errore nella fase di <code>try</code> allora esegui <code>code1</code></p><p>Esempio:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Inserisci un numero intero..&quot;</span><span class="token punctuation">)</span>        
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        x <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">except</span> ValueError<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;\\nNon \xE8 un numero intero, riprova..&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">continue</span>
    <span class="token keyword">if</span> x <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token keyword">break</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;\\nIl numero inserito \xE8: &quot;</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+q+'" alt=""></p><h1 id="lezione-16" tabindex="-1"><a class="header-anchor" href="#lezione-16" aria-hidden="true">#</a> Lezione 16</h1><h2 id="introduzione-alle-espressioni-regolari-con-python" tabindex="-1"><a class="header-anchor" href="#introduzione-alle-espressioni-regolari-con-python" aria-hidden="true">#</a> Introduzione alle espressioni regolari con Python</h2><p>Una RegEx, o espressione regolare, \xE8 una sequenza di caratteri che forma un modello di ricerca. Le RegEx possono essere utilizzate per verificare se una stringa contiene il modello di ricerca specificato. Python ha un modulo integrato chiamato <code>re</code>, che pu\xF2 essere utilizzato per lavorare con le espressioni regolari.</p>',16),Os={href:"https://www.w3schools.com/python/python_regex.asp",target:"_blank",rel:"noopener noreferrer"},Ms=s("w3schools - Python RegEx"),Ts=t(`<h1 id="lezione-17" tabindex="-1"><a class="header-anchor" href="#lezione-17" aria-hidden="true">#</a> Lezione 17</h1><h2 id="esercizio-asta-online-v2" tabindex="-1"><a class="header-anchor" href="#esercizio-asta-online-v2" aria-hidden="true">#</a> Esercizio Asta online v2</h2><p>Il seguente script vuole simulare l&#39;andamento di un&#39;asta online con la seguente regola:</p><ul><li>L&#39;asta verr\xE0 aggiudicata da chi avr\xE0 fatto un&#39;offerta la pi\xF9 vicina alla media delle offerte degli altri</li></ul><p>L&#39;utente dovr\xE0 inserire un&#39;offerta in <em>bit coin</em> e una <em>email</em> che rappresenter\xE0 l&#39;identificativo. E&#39; consentita un&#39;unica offerta per utente! In questa seconda parte ci occuperemo di inserire dei controlli aggiuntivi dei dati acquisiti.</p><ul><li><p>Aggiungeremo la possibilit\xE0 di inserire numeri decimali &quot;floating point&quot;. Per far ci\xF2 utilizzeremo la funzione di conversione esplicita da stringa (l&#39;input da tastiera) a numero decimale, <code>float()</code></p></li><li><p>Rileveremo tutti gli errori legati ad un&#39;inserimento di un dato <code>float</code> non valido come una stringa o qualche altro carattere (come ad esempio <strong>Invio</strong>) non interpretabile come numero decimale. Alla rivelazione dell&#39;errore stamperemo il messaggio d&#39;errore <code>&quot;Formato non valido, riprova ..&quot;</code>. Utilizzeremo il costrutto <code>try-except</code></p></li><li><p>Aggiungeremo un&#39;espressione regolare abbastanza semplice per il controllo del formato dell&#39;email. Per far ci\xF2 utilizzeremo la funzione <code>re.match(regExp, myVar)</code> del modulo <code>re</code>. L&#39;espressione regolare controlla se la stringa (nel nostro caso l&#39;email) inizia <code>^</code> con la sequenza di caratteri minuscoli <code>&quot;a-z&quot;</code>, maiuscoli <code>&quot;A-Z&quot;</code> o numerici <code>&quot;0-9&quot;</code> ripetuti. E&#39; seguita dal carattere <code>@</code>, continua con la sequenza di caratteri minuscoli, maiuscoli o numerici, prosegue con il carattere <code>.</code> ed p seguita dal dominio che per noi sar\xE0 nuovamente una sequenza di caratteri minuscoli, maiuscoli o numerici.</p></li></ul><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">import</span> re
offerte <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
altre_offerte <span class="token operator">=</span> <span class="token boolean">True</span>

<span class="token keyword">while</span> altre_offerte<span class="token punctuation">:</span>
    offerta <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;Inserisci l\`offerta pervenuta (0 per terminare): &quot;</span><span class="token punctuation">)</span>

    <span class="token keyword">try</span><span class="token punctuation">:</span>
        offerta <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>offerta<span class="token punctuation">)</span>
    <span class="token keyword">except</span> ValueError<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Formato non valido, riprova ...&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">continue</span>

    <span class="token keyword">if</span> offerta <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
        altre_offerte <span class="token operator">=</span> <span class="token boolean">False</span>
        <span class="token keyword">continue</span>

    <span class="token keyword">if</span> offerta <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Non possono essere fatte offerte negative!&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">continue</span>

    email <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;Inserire l\`email dell\`offerente: &quot;</span><span class="token punctuation">)</span>

    <span class="token keyword">if</span> <span class="token keyword">not</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">&quot;^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$&quot;</span><span class="token punctuation">,</span> email<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Email non valida, riprova ...&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">continue</span>

    nuova_offerta <span class="token operator">=</span> <span class="token punctuation">[</span>offerta<span class="token punctuation">,</span> email<span class="token punctuation">]</span>


<span class="token keyword">print</span><span class="token punctuation">(</span>offerte<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+w+`" alt=""></p><h1 id="lezione-18" tabindex="-1"><a class="header-anchor" href="#lezione-18" aria-hidden="true">#</a> Lezione 18</h1><h2 id="costrutto-if-in" tabindex="-1"><a class="header-anchor" href="#costrutto-if-in" aria-hidden="true">#</a> Costrutto <code>if ... in</code></h2><p>Analogamente al costrutto <code>for ... in</code> il costrutto <code>if ... in</code> si applica a collezioni di elementi in cui si richiede la ricerca di un particolare elemento in una lista</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">if</span> item <span class="token keyword">in</span> <span class="token builtin">list</span><span class="token punctuation">:</span>
    <span class="token comment">#code</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token comment">#code</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Esempio:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>myFruitsList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;banana&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;mela&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;kiwi&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;mandarino&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;mela&quot;</span><span class="token punctuation">]</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Inserisci il nome di un frutto&quot;</span><span class="token punctuation">)</span>
itemToSearch <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> itemToSearch <span class="token keyword">in</span> myFruitsList<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;C&#39;\xE8 almeno un/una: &quot;</span> <span class="token operator">+</span> itemToSearch <span class="token operator">+</span> <span class="token string">&quot; nella lista&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">else</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Non \xE8 presente nessuno/a &quot;</span> <span class="token operator">+</span> itemToSearch <span class="token operator">+</span> <span class="token string">&quot; nella lista&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+_+`" alt=""></p><h1 id="lezione-19" tabindex="-1"><a class="header-anchor" href="#lezione-19" aria-hidden="true">#</a> Lezione 19</h1><h2 id="esercizio-asta-online-v3" tabindex="-1"><a class="header-anchor" href="#esercizio-asta-online-v3" aria-hidden="true">#</a> Esercizio Asta online v3</h2><p>Il seguente script vuole simulare l&#39;andamento di un&#39;asta online con la seguente regola:</p><ul><li>L&#39;asta verr\xE0 aggiudicata da chi avr\xE0 fatto un&#39;offerta la pi\xF9 vicina alla media delle offerte degli altri</li></ul><p>L&#39;utente dovr\xE0 inserire un&#39;offerta in <em>bit coin</em> e una <em>email</em> che rappresenter\xE0 l&#39;identificativo. E&#39; consentita un&#39;unica offerta per utente! In questa terza parte contrellero che la coppia utente/offerta sia unica utilizzando il costrutto <code>if ... in</code></p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">import</span> re
offerte <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
altre_offerte <span class="token operator">=</span> <span class="token boolean">True</span>

<span class="token keyword">while</span> altre_offerte<span class="token punctuation">:</span>
    offerta <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;Inserisci l\`offerta pervenuta (0 per terminare): &quot;</span><span class="token punctuation">)</span>

    <span class="token keyword">try</span><span class="token punctuation">:</span>
        offerta <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>offerta<span class="token punctuation">)</span>
    <span class="token keyword">except</span> ValueError<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Formato non valido, riprova ...&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">continue</span>

    <span class="token keyword">if</span> offerta <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
        altre_offerte <span class="token operator">=</span> <span class="token boolean">False</span>
        <span class="token keyword">continue</span>

    <span class="token keyword">if</span> offerta <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Non possono essere fatte offerte negative!&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">continue</span>

    email <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;Inserire l\`email dell\`offerente: &quot;</span><span class="token punctuation">)</span>

    <span class="token keyword">if</span> <span class="token keyword">not</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">&quot;^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$&quot;</span><span class="token punctuation">,</span> email<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Email non valida, riprova ...&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">continue</span>

    nuova_offerta <span class="token operator">=</span> <span class="token punctuation">[</span>email<span class="token punctuation">,</span> offerta<span class="token punctuation">]</span>

    <span class="token comment"># controllo valido solo se viene fatta la stessa offerta con la stessa mail ... limitato!</span>
    <span class="token keyword">if</span> nuova_offerta <span class="token keyword">in</span> offerte<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Questo utente ha gi\xE0 fatto la sua unica offerta ... respinto!&quot;</span><span class="token punctuation">)</span>
        <span class="token keyword">continue</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        offerte<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nuova_offerta<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Le offerte valide sono:&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>offerte<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+z+'" alt=""></p><p>Come si vede una coppia identica <em>utente/bit coin</em> viene catturata e rifiutata ma \xE8 ancora permesso che un utente possa fare pi\xF9 offerte</p><h1 id="lezione-20" tabindex="-1"><a class="header-anchor" href="#lezione-20" aria-hidden="true">#</a> Lezione 20</h1><h2 id="introduzione-alle-funzioni" tabindex="-1"><a class="header-anchor" href="#introduzione-alle-funzioni" aria-hidden="true">#</a> Introduzione alle Funzioni</h2><p>Le funzioni vanno definite prima di utilizzarle</p><p>Una funzione \xE8 un blocco di codice che viene eseguito solo quando viene chiamata. \xC8 possibile passare dei valori, chiamati <strong>parametri</strong>, in una funzione.</p><p>Una funzione pu\xF2 restituire dei valori come risultato.</p><p>In Python una funzione viene definita utilizzando la parola chiave <code>def</code>.</p>',29),Ns={href:"https://www.w3schools.com/python/python_functions.asp",target:"_blank",rel:"noopener noreferrer"},Vs=s("w3schools - Python Functions"),Us=t(`<div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token comment">#definizione di una funzione</span>
<span class="token keyword">def</span> <span class="token function">myFunc</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span>
    <span class="token comment">#code</span>

<span class="token comment">#chiamata di una funzione</span>
myFunc<span class="token punctuation">(</span>value1<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Esempio:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">saluta</span><span class="token punctuation">(</span>nome<span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;ciao: &quot;</span> <span class="token operator">+</span> nome <span class="token operator">+</span><span class="token string">&quot;!&quot;</span><span class="token punctuation">)</span>

saluta<span class="token punctuation">(</span><span class="token string">&quot;Emil&quot;</span><span class="token punctuation">)</span>
saluta<span class="token punctuation">(</span><span class="token string">&quot;Tobias&quot;</span><span class="token punctuation">)</span>
saluta<span class="token punctuation">(</span><span class="token string">&quot;Linus&quot;</span><span class="token punctuation">)</span>

<span class="token comment"># ciao: Emil!</span>
<span class="token comment"># ciao: Tobias!</span>
<span class="token comment"># ciao: Linus!</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="lezione-21" tabindex="-1"><a class="header-anchor" href="#lezione-21" aria-hidden="true">#</a> Lezione 21</h1><h2 id="esercizio-asta-online-v4" tabindex="-1"><a class="header-anchor" href="#esercizio-asta-online-v4" aria-hidden="true">#</a> Esercizio Asta online v4</h2><p>Il seguente script vuole simulare l&#39;andamento di un&#39;asta online con la seguente regola:</p><ul><li>L&#39;asta verr\xE0 aggiudicata da chi avr\xE0 fatto un&#39;offerta la pi\xF9 vicina alla media delle offerte degli altri</li></ul><p>L&#39;utente dovr\xE0 inserire un&#39;offerta in <em>bit coin</em> e una <em>email</em> che rappresenter\xE0 l&#39;identificativo. In questa quarte parte introdurremo la funzione <code>stampa_lista(lista_offerte)</code> che riceve in ingresso la lista delle offerte e stampa il risultato secondo un formato specifico e la funzione <code>inserisci_offerte()</code> che rappresenta l&#39;acquisizione dati da tastiera da parte dell&#39;utente e il controllo sull&#39;integrit\xE0 dei dati ricevuti. Di fatto la complessit\xE0 dello script si riduce alla chiamta di due funzioni: <code>inserisci_offerte()</code> e <code>stampa_lista</code></p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">import</span> re

<span class="token keyword">def</span> <span class="token function">stampa_lista</span><span class="token punctuation">(</span>lista_offerte<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> offerta <span class="token keyword">in</span> lista_offerte<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Email Offerente: </span><span class="token interpolation"><span class="token punctuation">{</span>offerta<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token string"> - Offerta: </span><span class="token interpolation"><span class="token punctuation">{</span>offerta<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token string"> &quot;</span></span><span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">inserisci_offerte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    lista <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    altre_offerte <span class="token operator">=</span> <span class="token boolean">True</span>

    <span class="token keyword">while</span> altre_offerte<span class="token punctuation">:</span>
        offerta <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;Inserisci l\`offerta pervenuta (0 per terminare): &quot;</span><span class="token punctuation">)</span>

        <span class="token keyword">try</span><span class="token punctuation">:</span>
            offerta <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>offerta<span class="token punctuation">)</span>
        <span class="token keyword">except</span> ValueError<span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Formato non valido, riprova ...&quot;</span><span class="token punctuation">)</span>
            <span class="token keyword">continue</span>

        <span class="token keyword">if</span> offerta <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            altre_offerte <span class="token operator">=</span> <span class="token boolean">False</span>  <span class="token comment"># USCITA DAL CICLO</span>
            <span class="token keyword">continue</span>

        <span class="token keyword">if</span> offerta <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Non possono essere fatte offerte negative!&quot;</span><span class="token punctuation">)</span>
            <span class="token keyword">continue</span>

        email <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;Inserire l\`email dell\`offerente: &quot;</span><span class="token punctuation">)</span>

        <span class="token keyword">if</span> <span class="token keyword">not</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">&quot;^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$&quot;</span><span class="token punctuation">,</span> email<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Email non valida, riprova ...&quot;</span><span class="token punctuation">)</span>
            <span class="token keyword">continue</span>

        nuova_offerta <span class="token operator">=</span> <span class="token punctuation">[</span>email<span class="token punctuation">,</span> offerta<span class="token punctuation">]</span>

        <span class="token comment"># controllo valido solo se viene fatta la stessa offerta con la stessa mail ... limitato!</span>
        <span class="token keyword">if</span> nuova_offerta <span class="token keyword">in</span> lista<span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Questo utente ha gi\xE0 fatto la sua unica offerta ... respinto!&quot;</span><span class="token punctuation">)</span>
            <span class="token keyword">continue</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            lista<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nuova_offerta<span class="token punctuation">)</span>

    <span class="token keyword">return</span> lista


<span class="token comment"># grazie all\`uso di funzioni la complessit\xE0 del programma principale</span>
<span class="token comment"># \xE8 drasticamente ridotta</span>
offerte <span class="token operator">=</span> inserisci_offerte<span class="token punctuation">(</span><span class="token punctuation">)</span>
stampa_lista<span class="token punctuation">(</span>offerte<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="lezione-22" tabindex="-1"><a class="header-anchor" href="#lezione-22" aria-hidden="true">#</a> Lezione 22</h1><h2 id="esercizio-asta-online-v5" tabindex="-1"><a class="header-anchor" href="#esercizio-asta-online-v5" aria-hidden="true">#</a> Esercizio Asta online v5</h2><p>Il seguente script vuole simulare l&#39;andamento di un&#39;asta online con la seguente regola:</p><ul><li>L&#39;asta verr\xE0 aggiudicata da chi avr\xE0 fatto un&#39;offerta la pi\xF9 vicina alla media delle offerte degli altri</li></ul><p>L&#39;utente dovr\xE0 inserire un&#39;offerta in <em>bit coin</em> e una <em>email</em> che rappresenter\xE0 l&#39;identificativo. In questa quinta parte introdurremo le funzioni:</p><ul><li><p><code>trova_email(email, lista_offerte)</code>: Riceve come parametro una stringa digitata in input dall&#39;utente che rappresenta l&#39;identificativo utente, <em>email</em> e la lista di tutte le offerte, <em>lista_offerte</em>. Ritorna un <strong>boolean</strong> <em>True</em> se trova l&#39;identificativo <em>email</em> ricevuto come parametro come identificativo nella <em>lista_offerte</em>. Questa funzione controlla quindi se un utente ha gi\xE0 fatto un&#39;offerta.</p></li><li><p><code>media_offerte(lista_offerte)</code>: Riceve come parametro la lista di tutte le offert <em>lista_offerte</em>, calcola la media dei valori delle offerte che rappresentano i <em>bit coin</em> e ne ritorna il valore. Ritorna quindi un valore <strong>float</strong></p></li><li><p><code>minimo(lista_offerte)</code>: Riceve come parametro la lista di tutte le offert <em>lista_offerte</em>, calcola il minimo dei valori delle offerte che rappresentano i <em>bit coin</em> e ne ritorna il valore. Ritorna quindi un valore <strong>float</strong></p></li><li><p><code>massimo(lista_offerte)</code>: Riceve come parametro la lista di tutte le offert <em>lista_offerte</em>, calcola il massimo dei valori delle offerte che rappresentano i <em>bit coin</em> e ne ritorna il valore. Ritorna quindi un valore <strong>float</strong></p></li></ul><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">import</span> re

<span class="token keyword">def</span> <span class="token function">trova_email</span><span class="token punctuation">(</span>email<span class="token punctuation">,</span> lista_offerte<span class="token punctuation">)</span><span class="token punctuation">:</span>
    trovato <span class="token operator">=</span> <span class="token boolean">False</span>

    <span class="token keyword">for</span> offerta <span class="token keyword">in</span> lista_offerte<span class="token punctuation">:</span>
        <span class="token keyword">if</span> offerta<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> email<span class="token punctuation">:</span>
            trovato <span class="token operator">=</span> <span class="token boolean">True</span>
            <span class="token keyword">break</span>

    <span class="token keyword">return</span> trovato


<span class="token keyword">def</span> <span class="token function">media_offerte</span><span class="token punctuation">(</span>lista_offerte<span class="token punctuation">)</span><span class="token punctuation">:</span>
    somma <span class="token operator">=</span> <span class="token number">0.0</span>
    <span class="token keyword">for</span> offerta <span class="token keyword">in</span> lista_offerte<span class="token punctuation">:</span>
        somma <span class="token operator">+=</span> offerta<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>

    <span class="token keyword">return</span> somma <span class="token operator">/</span> <span class="token builtin">len</span><span class="token punctuation">(</span>lista_offerte<span class="token punctuation">)</span>


<span class="token comment"># si assume che la lista non sia vuota</span>
<span class="token keyword">def</span> <span class="token function">minimo</span><span class="token punctuation">(</span>lista_offerte<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment">#non si parte mai da un valore assoluto</span>
    <span class="token comment">#prelevo solo il valore numerico dell&#39;offerta</span>
    <span class="token comment">#min \xE8 un numero float</span>
    <span class="token builtin">min</span> <span class="token operator">=</span> lista_offerte<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>

    <span class="token comment">#lista_offerte[1:] ritorna una lista dal primo elemento fino all&#39;ultimo</span>
    <span class="token comment">#Itero ogni elemento della lista lista_offerte a partire dal primo</span>
    <span class="token keyword">for</span> offerta <span class="token keyword">in</span> lista_offerte<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        <span class="token comment">#se trovo un elemento pi\xF9 piccolo dell&#39;attuale &lt;min&gt;, aggiorno min</span>
        <span class="token keyword">if</span> offerta<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token builtin">min</span><span class="token punctuation">:</span>
            <span class="token builtin">min</span> <span class="token operator">=</span> offerta<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>

    <span class="token keyword">return</span> <span class="token builtin">min</span>


<span class="token comment"># si assume che la lista non sia vuota</span>
<span class="token keyword">def</span> <span class="token function">massimo</span><span class="token punctuation">(</span>lista_offerte<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token builtin">max</span> <span class="token operator">=</span> lista_offerte<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> offerta <span class="token keyword">in</span> lista_offerte<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> offerta<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token builtin">max</span><span class="token punctuation">:</span>
            <span class="token builtin">max</span> <span class="token operator">=</span> offerta<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>

    <span class="token keyword">return</span> <span class="token builtin">max</span>


<span class="token keyword">def</span> <span class="token function">stampa_lista</span><span class="token punctuation">(</span>lista_offerte<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> offerta <span class="token keyword">in</span> lista_offerte<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Email Offerente: </span><span class="token interpolation"><span class="token punctuation">{</span>offerta<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token string"> - Offerta: </span><span class="token interpolation"><span class="token punctuation">{</span>offerta<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token string"> &quot;</span></span><span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">inserisci_offerte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    lista <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    altre_offerte <span class="token operator">=</span> <span class="token boolean">True</span>

    <span class="token keyword">while</span> altre_offerte<span class="token punctuation">:</span>
        offerta <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;Inserisci l\`offerta pervenuta (0 per terminare): &quot;</span><span class="token punctuation">)</span>

        <span class="token keyword">try</span><span class="token punctuation">:</span>
            offerta <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>offerta<span class="token punctuation">)</span>
        <span class="token keyword">except</span> ValueError<span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Formato non valido, riprova ...&quot;</span><span class="token punctuation">)</span>
            <span class="token keyword">continue</span>

        <span class="token keyword">if</span> offerta <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            altre_offerte <span class="token operator">=</span> <span class="token boolean">False</span>  <span class="token comment"># USCITA DAL CICLO</span>
            <span class="token keyword">continue</span>

        <span class="token keyword">if</span> offerta <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Non possono essere fatte offerte negative!&quot;</span><span class="token punctuation">)</span>
            <span class="token keyword">continue</span>

        email <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;Inserire l\`email dell\`offerente: &quot;</span><span class="token punctuation">)</span>

        <span class="token keyword">if</span> <span class="token keyword">not</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">&quot;^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$&quot;</span><span class="token punctuation">,</span> email<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Email non valida, riprova ...&quot;</span><span class="token punctuation">)</span>
            <span class="token keyword">continue</span>

        nuova_offerta <span class="token operator">=</span> <span class="token punctuation">[</span>email<span class="token punctuation">,</span> offerta<span class="token punctuation">]</span>

        <span class="token comment"># controllo valido solo se viene fatta la stessa offerta con la stessa mail ... limitato!</span>
        <span class="token comment"># if nuova_offerta in offerte:</span>
        <span class="token comment">#     print(&quot;Questo utente ha gi\xE0 fatto la sua unica offerta ... respinto!&quot;)</span>
        <span class="token comment">#     continue</span>
        <span class="token comment"># else:</span>
        <span class="token comment">#     offerte.append(nuova_offerta)</span>

        <span class="token keyword">if</span> trova_email<span class="token punctuation">(</span>email<span class="token punctuation">,</span> lista<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Questo utente ha gi\xE0 fatto la sua unica offerta ... respinto!&quot;</span><span class="token punctuation">)</span>
            <span class="token keyword">continue</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            lista<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nuova_offerta<span class="token punctuation">)</span>

    <span class="token keyword">return</span> lista

<span class="token comment"># grazie all\`uso di funzioni la complessit\xE0 del programma principale</span>
<span class="token comment"># \xE8 drasticamente ridotta</span>
offerte <span class="token operator">=</span> inserisci_offerte<span class="token punctuation">(</span><span class="token punctuation">)</span>
stampa_lista<span class="token punctuation">(</span>offerte<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Offerta Media: </span><span class="token interpolation"><span class="token punctuation">{</span>media_offerte<span class="token punctuation">(</span>offerte<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Offerta minima: </span><span class="token interpolation"><span class="token punctuation">{</span>minimo<span class="token punctuation">(</span>offerte<span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+x+'" alt=""></p><h1 id="lezione-23" tabindex="-1"><a class="header-anchor" href="#lezione-23" aria-hidden="true">#</a> Lezione 23</h1><h2 id="python-list-comprehension" tabindex="-1"><a class="header-anchor" href="#python-list-comprehension" aria-hidden="true">#</a> Python - List Comprehension</h2><p><em>List Comprehension</em> offre una sintassi pi\xF9 breve quando si desidera creare un nuovo elenco basato sui valori di un elenco esistente.</p>',20),Zs={href:"https://www.w3schools.com/python/python_lists_comprehension.asp",target:"_blank",rel:"noopener noreferrer"},Ws=s("w3schools - Python - List Comprehension"),Qs=t(`<p>E&#39; una sorta di <strong>RegEx</strong> utilizzata per il tipo <strong>List</strong>. Sintassi.</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>newlist <span class="token operator">=</span> <span class="token punctuation">[</span>expression <span class="token keyword">for</span> item <span class="token keyword">in</span> iterable <span class="token keyword">if</span> condition <span class="token operator">==</span> <span class="token boolean">True</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Nell&#39;esempio che segue costruisco una lista non utilizzando <em>List Comprehension</em>:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;apple&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;banana&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;cherry&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;kiwi&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;mango&quot;</span><span class="token punctuation">]</span>
newlist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

<span class="token comment">#La nuova lista conterr\xE0 soltanto elementi che contengono il carattere &quot;a&quot;</span>
<span class="token keyword">for</span> x <span class="token keyword">in</span> fruits<span class="token punctuation">:</span>
  <span class="token keyword">if</span> <span class="token string">&quot;a&quot;</span> <span class="token keyword">in</span> x<span class="token punctuation">:</span>
    newlist<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>newlist<span class="token punctuation">)</span> <span class="token comment">#[&quot;apple&quot;, &quot;banana&quot;, &quot;mango&quot;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Il solito esempio utilizzando <em>List Comprehension</em>:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>fruits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;apple&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;banana&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;cherry&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;kiwi&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;mango&quot;</span><span class="token punctuation">]</span>

<span class="token comment">#List Comprehension</span>
newlist <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> fruits <span class="token keyword">if</span> <span class="token string">&quot;a&quot;</span> <span class="token keyword">in</span> x<span class="token punctuation">]</span>

<span class="token keyword">print</span><span class="token punctuation">(</span>newlist<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>E&#39; una sintassi molto vicina alla sintassi del linguaggio matematico.. Pu\xF2 essere infatti tradotto nel seguente modo: &lt;&lt; Cerca le &quot;x&quot; all&#39;interno della lista &quot;fruits&quot; tali che il carattere &quot;a&quot; \xE8 contenuto in &quot;x&quot;&gt;&gt;</p><p>Nel seguente esempio elenco i numeri dispari da 0 a 100 con una sola espressione <em>List Comprehension</em>:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token comment">#Cerca le x da 0 a 100 tali che il risultato della divisione intera tra x e 2 moltiplicato successivamente per 2 sia diverso da x</span>
<span class="token comment">#es: 3/2 = 1 &gt;&gt; 1*2 = 2 &gt;&gt; 3!=2 &gt;&gt; print</span>
<span class="token comment">#es: 4/2 = 2 &gt;&gt; 2*2 = 4 &gt;&gt; 4=4 </span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">if</span> x <span class="token operator">//</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">!=</span> x<span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="lezione-24" tabindex="-1"><a class="header-anchor" href="#lezione-24" aria-hidden="true">#</a> Lezione 24</h1><h2 id="esercizio-asta-online-v6" tabindex="-1"><a class="header-anchor" href="#esercizio-asta-online-v6" aria-hidden="true">#</a> Esercizio Asta online v6</h2><p>Il seguente script vuole simulare l&#39;andamento di un&#39;asta online con la seguente regola:</p><ul><li>L&#39;asta verr\xE0 aggiudicata da chi avr\xE0 fatto un&#39;offerta la pi\xF9 vicina alla media delle offerte degli altri</li></ul><p>L&#39;utente dovr\xE0 inserire un&#39;offerta in <em>bit coin</em> e una <em>email</em> che rappresenter\xE0 l&#39;identificativo. In questa sesta e ultima parte introdurremo le funzioni:</p><ul><li><p><code>offerta_minima(lista_offerte)</code>: riceve la <em>lista_offerte</em> come parametro e ne identifica la lista con l&#39;offerta minima. E&#39; simile alla funzione <code>minimo(lista_offerte)</code> solo che invece di ritornare il valore decimale dell&#39;offerta minima ritorna una lista comprendente la coppia <em>email/offerta</em> con <em>offerta</em> minima.</p></li><li><p><code>offerta_massima(lista_offerte)</code>: riceve la <em>lista_offerte</em> come parametro e ne identifica la lista con l&#39;offerta massima. E&#39; simile alla funzione <code>massimo(lista_offerte)</code> solo che invece di ritornare il valore decimale dell&#39;offerta massima ritorna una lista comprendente la coppia <em>email/offerta</em> con <em>offerta</em> massima.</p></li></ul><p>Lo script filtrer\xE0 inoltre le offerte che hanno una tolleranza del 10% calcolata sul valore medio. Infine, \xE8 stata definita una funzione <code>SIMULA_inserisci_offerte()</code> per evitare di inserire i dati da tastiera e testare lo script</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">import</span> re

<span class="token keyword">def</span> <span class="token function">SIMULA_inserisci_offerte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span>
        <span class="token punctuation">[</span><span class="token string">&#39;a@a.com&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;b@b.com&#39;</span><span class="token punctuation">,</span> <span class="token number">3.3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;c@c.com&#39;</span><span class="token punctuation">,</span> <span class="token number">4.1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;d@d.com&#39;</span><span class="token punctuation">,</span> <span class="token number">3.8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&#39;e@e.com&#39;</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span>
    <span class="token punctuation">]</span>

<span class="token keyword">def</span> <span class="token function">trova_email</span><span class="token punctuation">(</span>email<span class="token punctuation">,</span> lista_offerte<span class="token punctuation">)</span><span class="token punctuation">:</span>
    trovato <span class="token operator">=</span> <span class="token boolean">False</span>

    <span class="token keyword">for</span> offerta <span class="token keyword">in</span> lista_offerte<span class="token punctuation">:</span>
        <span class="token keyword">if</span> offerta<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> email<span class="token punctuation">:</span>
            trovato <span class="token operator">=</span> <span class="token boolean">True</span>
            <span class="token keyword">break</span>

    <span class="token keyword">return</span> trovato

<span class="token keyword">def</span> <span class="token function">media_offerte</span><span class="token punctuation">(</span>lista_offerte<span class="token punctuation">)</span><span class="token punctuation">:</span>
    somma <span class="token operator">=</span> <span class="token number">0.0</span>
    <span class="token keyword">for</span> offerta <span class="token keyword">in</span> lista_offerte<span class="token punctuation">:</span>
        somma <span class="token operator">+=</span> offerta<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>

    <span class="token keyword">return</span> somma <span class="token operator">/</span> <span class="token builtin">len</span><span class="token punctuation">(</span>lista_offerte<span class="token punctuation">)</span>

<span class="token comment"># si assume che la lista non sia vuota</span>
<span class="token keyword">def</span> <span class="token function">minimo</span><span class="token punctuation">(</span>lista_offerte<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token builtin">min</span> <span class="token operator">=</span> lista_offerte<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>

    <span class="token keyword">for</span> offerta <span class="token keyword">in</span> lista_offerte<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> offerta<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token builtin">min</span><span class="token punctuation">:</span>
            <span class="token builtin">min</span> <span class="token operator">=</span> offerta<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>

    <span class="token keyword">return</span> <span class="token builtin">min</span>

<span class="token comment"># invece del solo valore minimo restituisce</span>
<span class="token comment"># l\`intera offerta [email, valore_offerta]</span>
<span class="token keyword">def</span> <span class="token function">offerta_minima</span><span class="token punctuation">(</span>lista_offerte<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token builtin">min</span> <span class="token operator">=</span> lista_offerte<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>

    <span class="token keyword">for</span> offerta <span class="token keyword">in</span> lista_offerte<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> offerta<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token builtin">min</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
            <span class="token builtin">min</span> <span class="token operator">=</span> offerta
    <span class="token comment">#ritorna la coppia &lt;email, valore_offerta&gt; corrispondente al minimo di &quot;valore_offerta&quot;</span>
    <span class="token keyword">return</span> <span class="token builtin">min</span>


<span class="token comment"># si assume che la lista non sia vuota</span>
<span class="token keyword">def</span> <span class="token function">massimo</span><span class="token punctuation">(</span>lista_offerte<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token builtin">max</span> <span class="token operator">=</span> lista_offerte<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> offerta <span class="token keyword">in</span> lista_offerte<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> offerta<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token builtin">max</span><span class="token punctuation">:</span>
            <span class="token builtin">max</span> <span class="token operator">=</span> offerta<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>

    <span class="token keyword">return</span> <span class="token builtin">max</span>


<span class="token comment"># invece del solo valore massimo restituisce</span>
<span class="token comment"># l\`intera offerta [email, valore_offerta]</span>
<span class="token keyword">def</span> <span class="token function">offerta_massima</span><span class="token punctuation">(</span>lista_offerte<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token builtin">max</span> <span class="token operator">=</span> lista_offerte<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>

    <span class="token keyword">for</span> offerta <span class="token keyword">in</span> lista_offerte<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> offerta<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token builtin">max</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
            <span class="token builtin">max</span> <span class="token operator">=</span> offerta

    <span class="token keyword">return</span> <span class="token builtin">max</span>


<span class="token keyword">def</span> <span class="token function">stampa_lista</span><span class="token punctuation">(</span>lista_offerte<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> offerta <span class="token keyword">in</span> lista_offerte<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Email Offerente: </span><span class="token interpolation"><span class="token punctuation">{</span>offerta<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token string"> - Offerta: </span><span class="token interpolation"><span class="token punctuation">{</span>offerta<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token string"> &quot;</span></span><span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">inserisci_offerte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    lista <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    altre_offerte <span class="token operator">=</span> <span class="token boolean">True</span>

    <span class="token keyword">while</span> altre_offerte<span class="token punctuation">:</span>
        offerta <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;Inserisci l\`offerta pervenuta (0 per terminare): &quot;</span><span class="token punctuation">)</span>

        <span class="token keyword">try</span><span class="token punctuation">:</span>
            offerta <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>offerta<span class="token punctuation">)</span>
        <span class="token keyword">except</span> ValueError<span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Formato non valido, riprova ...&quot;</span><span class="token punctuation">)</span>
            <span class="token keyword">continue</span>

        <span class="token keyword">if</span> offerta <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            altre_offerte <span class="token operator">=</span> <span class="token boolean">False</span>  <span class="token comment"># USCITA DAL CICLO</span>
            <span class="token keyword">continue</span>

        <span class="token keyword">if</span> offerta <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Non possono essere fatte offerte negative!&quot;</span><span class="token punctuation">)</span>
            <span class="token keyword">continue</span>

        email <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">&quot;Inserire l\`email dell\`offerente: &quot;</span><span class="token punctuation">)</span>

        <span class="token keyword">if</span> <span class="token keyword">not</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">&quot;^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\\.[a-zA-Z0-9-.]+$&quot;</span><span class="token punctuation">,</span> email<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Email non valida, riprova ...&quot;</span><span class="token punctuation">)</span>
            <span class="token keyword">continue</span>

        nuova_offerta <span class="token operator">=</span> <span class="token punctuation">[</span>email<span class="token punctuation">,</span> offerta<span class="token punctuation">]</span>

        <span class="token keyword">if</span> trova_email<span class="token punctuation">(</span>email<span class="token punctuation">,</span> lista<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;Questo utente ha gi\xE0 fatto la sua unica offerta ... respinto!&quot;</span><span class="token punctuation">)</span>
            <span class="token keyword">continue</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            lista<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nuova_offerta<span class="token punctuation">)</span>

    <span class="token keyword">return</span> lista

<span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token triple-quoted-string string">&quot;&quot;&quot;
Il seguente script vuole simulare l\\&#39;andamento di un\\&#39;asta online con la seguente regola:
&lt;&lt; L\\&#39;asta verr\xE0 aggiudicata da chi avr\xE0 fatto un&#39;offerta la pi\xF9 vicina alla media delle offerte degli altri.&gt;&gt;
L&#39;utente dovr\xE0 inserire un&#39;offerta in bit coin e una email che rappresenter\xE0 l&#39;identificativo&quot;&quot;&quot;</span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;-&quot;</span><span class="token operator">*</span><span class="token number">40</span><span class="token punctuation">)</span>

<span class="token comment"># grazie all\`uso di funzioni la complessit\xE0 del programma principale</span>
<span class="token comment"># \xE8 drasticamente ridotta</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;\\nStampo una lista di offerte predefinite, evito l&#39;input da tastiera&quot;</span><span class="token punctuation">)</span>
offerte <span class="token operator">=</span> SIMULA_inserisci_offerte<span class="token punctuation">(</span><span class="token punctuation">)</span>
stampa_lista<span class="token punctuation">(</span>offerte<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;-&quot;</span><span class="token operator">*</span><span class="token number">40</span><span class="token punctuation">)</span>

<span class="token comment"># eliminiamo l\`offerta minima e massima</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;\\nElimino l&#39;offerta pi\xF9 alta e l&#39;offerta pi\xF9 bassa&quot;</span><span class="token punctuation">)</span>
offerte<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>offerta_minima<span class="token punctuation">(</span>offerte<span class="token punctuation">)</span><span class="token punctuation">)</span>
offerte<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>offerta_massima<span class="token punctuation">(</span>offerte<span class="token punctuation">)</span><span class="token punctuation">)</span>
stampa_lista<span class="token punctuation">(</span>offerte<span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;-&quot;</span><span class="token operator">*</span><span class="token number">40</span><span class="token punctuation">)</span>

<span class="token comment"># costruiamo una nuova lista con gli elementi rimasti</span>
<span class="token comment"># che non si discostano pi\xF9 del 10% dalla media dei rimasti</span>
offerta_media <span class="token operator">=</span> media_offerte<span class="token punctuation">(</span>offerte<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Media: </span><span class="token interpolation"><span class="token punctuation">{</span>offerta_media<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>

tolleranza <span class="token operator">=</span> offerta_media<span class="token operator">/</span><span class="token number">100</span><span class="token operator">*</span><span class="token number">10</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Tolleranza 10%: </span><span class="token interpolation"><span class="token punctuation">{</span>tolleranza<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>

<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;-&quot;</span><span class="token operator">*</span><span class="token number">40</span><span class="token punctuation">)</span>


offerte_filtrate <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> offerte <span class="token keyword">if</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>offerta_media<span class="token punctuation">)</span> <span class="token operator">&lt;</span> tolleranza<span class="token punctuation">]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&quot;\\nOfferte filtrate in base alla tolleranza..&quot;</span><span class="token punctuation">)</span>
stampa_lista<span class="token punctuation">(</span>offerte_filtrate<span class="token punctuation">)</span>

<span class="token comment">#Il seguente script vuole simulare l&#39;andamento di un&#39;asta online con la seguente regola:</span>
<span class="token comment">#&lt;&lt; L&#39;asta verr\xE0 aggiudicata da chi avr\xE0 fatto un&#39;offerta la pi\xF9 vicina alla media delle offerte degli altri.&gt;&gt;</span>
<span class="token comment">#L&#39;utente dovr\xE0 inserire un&#39;offerta in bit coin e una email che rappresenter\xE0 l&#39;identificativo</span>
<span class="token comment">#----------------------------------------</span>
<span class="token comment">#</span>
<span class="token comment">#Stampo una lista di offerte predefinite, evito l&#39;input da tastiera</span>
<span class="token comment">#Email Offerente: a@a.com - Offerta: 1 </span>
<span class="token comment">#Email Offerente: b@b.com - Offerta: 3.3 </span>
<span class="token comment">#Email Offerente: c@c.com - Offerta: 4.1 </span>
<span class="token comment">#Email Offerente: d@d.com - Offerta: 3.8 </span>
<span class="token comment">#Email Offerente: e@e.com - Offerta: 12 </span>
<span class="token comment">#----------------------------------------</span>
<span class="token comment">#</span>
<span class="token comment">#Elimino l&#39;offerta pi\xF9 alta e l&#39;offerta pi\xF9 bassa</span>
<span class="token comment">#Email Offerente: b@b.com - Offerta: 3.3 </span>
<span class="token comment">#Email Offerente: c@c.com - Offerta: 4.1 </span>
<span class="token comment">#Email Offerente: d@d.com - Offerta: 3.8 </span>
<span class="token comment">#----------------------------------------</span>
<span class="token comment">#Media: 3.733333333333333</span>
<span class="token comment">#Tolleranza 10%: 0.3733333333333333</span>
<span class="token comment">#----------------------------------------</span>
<span class="token comment">#</span>
<span class="token comment">#Offerte filtrate in base alla tolleranza..</span>
<span class="token comment">#Email Offerente: c@c.com - Offerta: 4.1 </span>
<span class="token comment">#Email Offerente: d@d.com - Offerta: 3.8 </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,17);function $s(Bs,Ks){const a=l("ExternalLinkIcon");return i(),p("div",null,[P,n("p",null,[n("a",F,[I,e(a)])]),E,n("p",null,[D,n("a",S,[A,e(a)]),C]),R,n("p",null,[O,n("a",M,[T,e(a)]),N,V,U,n("a",Z,[W,e(a)]),Q,$,B]),K,n("p",null,[G,n("a",J,[j,e(a)]),H,X]),Y,n("p",null,[n("a",nn,[sn,e(a)]),an,n("a",en,[tn,e(a)]),on]),pn,n("ul",null,[n("li",null,[n("p",null,[ln,cn,rn,un,dn,mn,kn,vn,n("a",bn,[fn,e(a)]),gn,hn,yn]),qn]),n("li",null,[n("p",null,[wn,_n,zn,xn,Ln,Pn,n("a",Fn,[In,e(a)]),En,Dn,Sn]),An])]),Cn,n("p",null,[n("a",Rn,[On,e(a)])]),Mn,n("p",null,[n("a",Tn,[Nn,e(a)])]),Vn,n("ul",null,[n("li",null,[Un,Zn,n("a",Wn,[Qn,e(a)]),$n,Bn,Kn,Gn,Jn,jn,Hn,Xn,Yn])]),ns,n("ul",null,[n("li",null,[ss,as,es,ts,os,is,ps,ls,cs,n("a",rs,[us,e(a)]),ds]),ms]),ks,n("p",null,[n("a",vs,[bs,e(a)])]),fs,n("p",null,[gs,hs,ys,n("a",qs,[ws,e(a)]),_s]),zs,n("p",null,[xs,n("a",Ls,[Ps,e(a)]),Fs]),Is,n("p",null,[n("a",Es,[Ds,e(a)])]),Ss,n("p",null,[n("a",As,[Cs,e(a)])]),Rs,n("p",null,[n("a",Os,[Ms,e(a)])]),Ts,n("p",null,[n("a",Ns,[Vs,e(a)])]),Us,n("p",null,[n("a",Zs,[Ws,e(a)])]),Qs])}var Js=o(L,[["render",$s],["__file","index.html.vue"]]);export{Js as default};
