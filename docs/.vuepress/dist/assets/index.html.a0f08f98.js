import{_ as n,o as s,c as a,a as t}from"./app.30ed76b5.js";var p="/assets/area-e-perimetro-di-un-rettangolo.8f6a7721.gif",e="/assets/da-intero-a-decine-centinaia-e-unita.20931345.gif",o="/assets/negativo-nullo-o-positivo.b15f1d86.gif",c="/assets/pari-o-dispari.61788090.gif",i="/assets/uguali-.170782fa.gif",l="/assets/da-intero-a-carattere.fb15c143.gif",u="/assets/da-carattere-a-intero.ba5e1d85.gif",r="/assets/da-minuscolo-a-maiuscolo.8422e2be.gif",k="/assets/da-maiuscolo-a-minuscolo.9926517a.gif",d="/assets/da-minuscolo-a-maiuscolo-e-viceversa.b65ec690.gif",v="/assets/risolvi-equazioni-di-ii-grado.5ee49796.gif",m="/assets/conta-dispari-da-sequenza-illimitata.9ffe877b.gif",b="/assets/stampa-cifre.95ffebdc.gif",g="/assets/tavola-pitagorica.f11f9ded.gif",y="/assets/conta-dispari-da-sequenza-limitata.dbc45440.gif",q="/assets/sequenza-crescente-decrescente-o-non-ordinata.705fa619.gif",w="/assets/vettore-palindromo.f24a8ff3.gif";const h={},f=t(`<h1 id="c" tabindex="-1"><a class="header-anchor" href="#c" aria-hidden="true">#</a> C++</h1><p>Raccolta di esempi in C++ ordinati secondo difficolt\xE0</p><h2 id="area-e-perimetro-di-un-rettangolo" tabindex="-1"><a class="header-anchor" href="#area-e-perimetro-di-un-rettangolo" aria-hidden="true">#</a> Area e perimetro di un rettangolo</h2><p>Restituisce area e perimetro di un rettangolo dati base e altezza immessi da tastiera</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Title: Area e perimetro di un rettangolo&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span>
         <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Description: Restituisce area e perimetro di un rettangolo dati base e altezza immessi da tastiera&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>

    <span class="token keyword">double</span> base<span class="token punctuation">,</span> altezza<span class="token punctuation">,</span> perimetro<span class="token punctuation">,</span> area<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;base:&quot;</span><span class="token punctuation">;</span>
    cin <span class="token operator">&gt;&gt;</span> base<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;altezza:&quot;</span><span class="token punctuation">;</span>
    cin <span class="token operator">&gt;&gt;</span> altezza<span class="token punctuation">;</span>

    perimetro <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token punctuation">(</span> base <span class="token operator">+</span> altezza <span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//Conversione implicita 2 -&gt; 2.0</span>
    area <span class="token operator">=</span> base <span class="token operator">*</span> altezza<span class="token punctuation">;</span>

    cout <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Perimetro: &quot;</span> <span class="token operator">&lt;&lt;</span> perimetro
         <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Area: &quot;</span> <span class="token operator">&lt;&lt;</span> area <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+p+`" alt="area-e-perimetro-di-un-rettangolo"></p><h2 id="da-intero-a-decine-centinaia-e-unita" tabindex="-1"><a class="header-anchor" href="#da-intero-a-decine-centinaia-e-unita" aria-hidden="true">#</a> Da intero a decine centinaia e unita&#39;</h2><p>Acquisisce un numero intero positivo minore o uguale a 999 immesso da tastiera e stampa la scomposizione in centinaia, decine, unita&#39;.</p><p><strong>Modo 1:</strong> Uso del costrutto <code>if ... else</code></p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Title: Da intero a decine centinaia e unita&#39;&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span>
         <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Description: Acquisisce un numero intero positivo minore o uguale a 999 immesso da tastiera e stampa la scomposizione in centinaia, decine, unita&#39;&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> numero<span class="token punctuation">,</span> centinaia<span class="token punctuation">,</span> decine<span class="token punctuation">,</span> unita<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Inserisci un numero positivo minore o uguale a 999.&quot;</span>
         <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Numero:&quot;</span><span class="token punctuation">;</span>
    cin <span class="token operator">&gt;&gt;</span> numero<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span> numero <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span> numero <span class="token operator">&gt;</span> <span class="token number">999</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Numero non valido&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        unita <span class="token operator">=</span> numero <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>
        decine <span class="token operator">=</span> <span class="token punctuation">(</span> numero <span class="token operator">/</span> <span class="token number">10</span> <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>
        centinaia <span class="token operator">=</span> numero <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">;</span>

        cout <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;centinaia:&quot;</span> <span class="token operator">&lt;&lt;</span> centinaia
             <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;decine:&quot;</span> <span class="token operator">&lt;&lt;</span> decine
             <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;unita&#39;:&quot;</span> <span class="token operator">&lt;&lt;</span> unita
             <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Modo 2</strong> Uso del ternary operator <code>... ? ... : ...</code></p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Title: Da intero a decine centinaia e unita&#39;&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span>
         <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Description: Acquisisce un numero intero positivo minore o uguale a 999 immesso da tastiera e stampa la scomposizione in centinaia, decine, unita&#39;&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> numero<span class="token punctuation">,</span> centinaia<span class="token punctuation">,</span> decine<span class="token punctuation">,</span> unita<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Inserisci un numero positivo minore o uguale a 999.&quot;</span>
         <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Numero:&quot;</span><span class="token punctuation">;</span>
    cin <span class="token operator">&gt;&gt;</span> numero<span class="token punctuation">;</span>
    <span class="token comment">//Forzo i numeri maggiori 999 a 999 e i numeri minori di 0 a 0.</span>
    numero <span class="token operator">=</span> <span class="token punctuation">(</span> numero <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span> numero <span class="token operator">&lt;</span> <span class="token number">999</span> <span class="token operator">?</span> numero <span class="token operator">:</span> <span class="token number">999</span> <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>

    unita <span class="token operator">=</span> numero <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>
    decine <span class="token operator">=</span> <span class="token punctuation">(</span> numero <span class="token operator">/</span> <span class="token number">10</span> <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>
    centinaia <span class="token operator">=</span> numero <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">;</span>

    cout <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;centinaia:&quot;</span> <span class="token operator">&lt;&lt;</span> centinaia
         <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;decine:&quot;</span> <span class="token operator">&lt;&lt;</span> decine
         <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;unita&#39;:&quot;</span> <span class="token operator">&lt;&lt;</span> unita<span class="token punctuation">;</span>
         <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+e+`" alt=""></p><h2 id="negativo-nullo-o-positivo" tabindex="-1"><a class="header-anchor" href="#negativo-nullo-o-positivo" aria-hidden="true">#</a> Negativo, nullo o positivo?</h2><p>Acquisisce un numero intero da tastiera e stampa se \xE8 negativo, nullo o positivo</p><p><strong>Modo 1:</strong> Uso del costrutto <code>if ... else</code></p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Title: Negativo, nullo o positivo?&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span>
         <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Description: Acquisisce un numero intero da tastiera e stampa se \xE8 negativo, nullo o positivo&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> numero<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Inserisci un numero intero.&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span>
         <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Numero:&quot;</span><span class="token punctuation">;</span>
    cin <span class="token operator">&gt;&gt;</span> numero<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span> numero <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">)</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Negativo.&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> numero <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Nullo.&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Positivo.&quot;</span><span class="token punctuation">;</span>

    cout <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Modo 2:</strong> Uso del ternary operator <code>... ? ... : ...</code></p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Title: Negativo, nullo o positivo?&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span>
         <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Description: Acquisisce un numero intero da tastiera e stampa se \xE8 negativo, nullo o positivo&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> numero<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Inserisci un numero intero.&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span>
         <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Numero:&quot;</span><span class="token punctuation">;</span>
    cin <span class="token operator">&gt;&gt;</span> numero<span class="token punctuation">;</span>

    <span class="token punctuation">(</span> numero <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span> cout <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Nullo.&quot;</span> <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>numero <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>cout <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Positivo.&quot;</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>cout <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Negativo.&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

    cout <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+o+`" alt=""></p><h2 id="pari-o-dispari" tabindex="-1"><a class="header-anchor" href="#pari-o-dispari" aria-hidden="true">#</a> Pari o Dispari?</h2><p>Acquisisce un numero intero da tastiera e stampa se \xE8 pari o dispari</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Ttitle: Pari o dispari?&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span> 
         <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Description: Acquisisce un numero intero da tastiera e stampa se \xE8 pari o dispari\\n&quot;</span><span class="token punctuation">;</span>
        
    <span class="token keyword">int</span> n<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Inserisci un numero:&quot;</span><span class="token punctuation">;</span>
    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>

    <span class="token punctuation">(</span>n<span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Dispari.&quot;</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Pari.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    cout <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+c+`" alt=""></p><h2 id="uguali" tabindex="-1"><a class="header-anchor" href="#uguali" aria-hidden="true">#</a> Uguali ?</h2><p>Acquisisce tre numeri interi da tastiera e stampa se sono uguali</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Title: Uguali ?\\n&quot;</span>
         <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Acquisisce tre numeri interi da tastiera e stampa se sono uguali\\n&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> n3<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Inserisci tre numeri interi.&quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;n1:&quot;</span><span class="token punctuation">;</span>
    cin <span class="token operator">&gt;&gt;</span> n1<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;n2:&quot;</span><span class="token punctuation">;</span>
    cin <span class="token operator">&gt;&gt;</span> n2<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;n3:&quot;</span><span class="token punctuation">;</span>
    cin <span class="token operator">&gt;&gt;</span> n3<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>n1 <span class="token operator">==</span> n2<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>n2 <span class="token operator">==</span> n3<span class="token punctuation">)</span> <span class="token punctuation">)</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Tutti uguali.&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>n1 <span class="token operator">==</span> n2<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>n1 <span class="token operator">==</span> n3<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>n2 <span class="token operator">==</span> n3<span class="token punctuation">)</span> <span class="token punctuation">)</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Due uguali.&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Diversi.&quot;</span><span class="token punctuation">;</span>
    
    cout <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+i+`" alt=""></p><h2 id="da-intero-a-carattere" tabindex="-1"><a class="header-anchor" href="#da-intero-a-carattere" aria-hidden="true">#</a> Da intero a carattere</h2><p>Acquisisce un numero intero da tastiera e lo converte in un carattere stampabile</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Title: Da intero a carattere\\n&quot;</span>
         <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Description: Acquisisce un numero intero da tastiera e lo converte in un carattere stampabile\\n&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> i<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;insercisci un numero:&quot;</span><span class="token punctuation">;</span>
    cin <span class="token operator">&gt;&gt;</span> i<span class="token punctuation">;</span>

    <span class="token comment">//Se minore di 31 o maggiore di 127 forza a 32.</span>
    i <span class="token operator">=</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;</span> <span class="token number">127</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">:</span> i<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token keyword">char</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>

    cout <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+l+`" alt=""></p><h2 id="da-carattere-a-intero" tabindex="-1"><a class="header-anchor" href="#da-carattere-a-intero" aria-hidden="true">#</a> Da carattere a intero</h2><p>Acquisisce un carattere da tastiera e lo converte nel corrispondente codice ASCII</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Title: Da carattere a intero\\n&quot;</span>
         <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Description: Acquisisce un carattere da tastiera e lo converte nel corrispondente codice ASCII\\n&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">char</span> c<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Inserisci un carattere: &quot;</span><span class="token punctuation">;</span>
    cin <span class="token operator">&gt;&gt;</span> c<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>c <span class="token operator">&gt;=</span> <span class="token char">&#39;a&#39;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>c <span class="token operator">&lt;=</span> <span class="token char">&#39;z&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>c <span class="token operator">&gt;=</span> <span class="token char">&#39;A&#39;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>c <span class="token operator">&lt;=</span> <span class="token char">&#39;Z&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">)</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\nCodisce ASCII: &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">int</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\nNon e&#39; una lettera dell&#39;alfabeto.&quot;</span><span class="token punctuation">;</span>
    
    cout <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+u+`" alt=""></p><h2 id="da-minuscolo-a-maiuscolo" tabindex="-1"><a class="header-anchor" href="#da-minuscolo-a-maiuscolo" aria-hidden="true">#</a> Da minuscolo a maiuscolo</h2><p>Acquisisce un carattere letterale minuscolo da tastiera e lo converte in un carattere letterale maiuscolo</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token comment">//0100 0000 -&gt; MAIUSC</span>
<span class="token comment">//0110 0000 -&gt; min</span>

<span class="token comment">//Devo mettere a 0 il quinto bit. Quindi min = (xx1x xxxx) &amp; (1101 1111);</span>
<span class="token comment">// 1101 1111 --&gt; = ~(1&lt;&lt;5)</span>
<span class="token comment">// ATT:</span>
<span class="token comment">// 1&lt;&lt;5 = 0010 0000</span>
<span class="token comment">// ~(1&lt;&lt;5) = 1101 1111</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Title: Da minuscolo a maiuscolo\\n&quot;</span>
         <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Description: Acquisisce un carattere letterale minuscolo da tastiera e lo converte in un carattere letterale maiuscolo\\n&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">char</span> c<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Inserisci un carattere minuscolo: &quot;</span><span class="token punctuation">;</span>
    cin <span class="token operator">&gt;&gt;</span> c<span class="token punctuation">;</span>

    c <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token punctuation">(</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">5</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Il carattere maiuscolo e&#39;: &quot;</span> <span class="token operator">&lt;&lt;</span> c<span class="token punctuation">;</span>

    cout <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+r+`" alt=""></p><h2 id="da-maiuscolo-a-minuscolo" tabindex="-1"><a class="header-anchor" href="#da-maiuscolo-a-minuscolo" aria-hidden="true">#</a> Da maiuscolo a minuscolo</h2><p>Acquisisce un carattere letterale maiuscolo da tastiera e lo converte in un carattere letterale minuscolo</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token comment">//0100 0000 -&gt; MAIUSC</span>
<span class="token comment">//0110 0000 -&gt; min</span>

<span class="token comment">//Devo mettere a 1 il quinto bit. Quindi min = (xx1x xxxx) | (0010 0000);</span>
<span class="token comment">// 0010 0000 --&gt; = (1&lt;&lt;5)</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Title: Da maiuscolo a minuscolo\\n&quot;</span>
         <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Description: Acquisisce un carattere letterale maiuscolo da tastiera e lo converte in un carattere letterale minuscolo\\n&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">char</span> c<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Inserisci un carattere MAIUSCOLO: &quot;</span><span class="token punctuation">;</span>
    cin <span class="token operator">&gt;&gt;</span> c<span class="token punctuation">;</span>

    c <span class="token operator">|=</span> <span class="token punctuation">(</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">5</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Il carattere minuscolo e&#39;: &quot;</span> <span class="token operator">&lt;&lt;</span> c<span class="token punctuation">;</span>

    cout <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+k+`" alt=""></p><h2 id="da-minuscolo-a-maiuscolo-e-viceversa" tabindex="-1"><a class="header-anchor" href="#da-minuscolo-a-maiuscolo-e-viceversa" aria-hidden="true">#</a> Da minuscolo a maiuscolo e viceversa</h2><p>Acquisisce un carattere letterale da tastiera e:</p><ul><li>Lo converte in maiuscolo se \xE8 minuscolo</li><li>Lo converte in minuscolo se \xE8 maiuscolo</li><li>Restituisce il carattere se non \xE8 una lettera</li></ul><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token comment">//010x xxxx -&gt; MAIUSC</span>
<span class="token comment">//011x xxxx -&gt; minusc</span>
<span class="token comment">//La lettera &#39;k&#39; differisce di 2^5 rispetto alla lettera &#39;K&#39;</span>
<span class="token comment">//Calcolo &#39;a&#39; - &#39;A&#39;</span>

<span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Title: Da minuscolo a maiuscolo e viceversa\\n&quot;</span>
         <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Description: Acquisisce un carattere letterale da tastiera e:\\n&quot;</span>
         <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;- Lo converte in maiuscolo se \xE8 minuscolo\\n&quot;</span>
         <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;- Lo converte in minuscolo se \xE8 maiuscolo\\n&quot;</span>
         <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;- Restituisce il carattere se non \xE8 una lettera\\n&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">char</span> c<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Inserisci un carattere: &quot;</span><span class="token punctuation">;</span>
    cin <span class="token operator">&gt;&gt;</span> c<span class="token punctuation">;</span>

    <span class="token keyword">const</span> <span class="token keyword">int</span> t <span class="token operator">=</span> <span class="token char">&#39;a&#39;</span> <span class="token operator">-</span> <span class="token char">&#39;A&#39;</span><span class="token punctuation">;</span>               <span class="token comment">//Costante di conversione min&lt;-&gt;MAIUSC</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span> c <span class="token operator">&gt;=</span> <span class="token char">&#39;a&#39;</span> <span class="token operator">&amp;&amp;</span> c <span class="token operator">&lt;=</span> <span class="token char">&#39;z&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
        c <span class="token operator">-=</span> t<span class="token punctuation">;</span>                            <span class="token comment">//Trasformo min-&gt;MAIUSC</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Il carattere maiuscolo e&#39;: &quot;</span> <span class="token operator">&lt;&lt;</span> c<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> c <span class="token operator">&gt;=</span> <span class="token char">&#39;A&#39;</span> <span class="token operator">&amp;&amp;</span> c <span class="token operator">&lt;=</span> <span class="token char">&#39;Z&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
        c <span class="token operator">+=</span> t<span class="token punctuation">;</span>                            <span class="token comment">//Trasformo MAIUSC-min</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Il carattere minuscolo e&#39;: &quot;</span> <span class="token operator">&lt;&lt;</span> c<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Il carattere inserito e&#39;: &quot;</span> <span class="token operator">&lt;&lt;</span> c<span class="token punctuation">;</span>
    
    cout <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+d+`" alt=""></p><h2 id="risolvi-equazioni-di-ii-grado" tabindex="-1"><a class="header-anchor" href="#risolvi-equazioni-di-ii-grado" aria-hidden="true">#</a> Risolvi equazioni di II grado</h2><p>Calcola i risultati di un equazione di secondo grado del tipo:</p><div class="language-math ext-math line-numbers-mode"><pre class="language-math"><code>ax^2 + bx + c = 0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Inserendo da tastiera i valori dei coefficienti <code>a</code>, <code>b</code>, <code>c</code></p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cmath&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Ttile: Risolvi equazioni di II grado\\n&quot;</span>
         <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Description: Calcola i risultati di un equazione di secondo grado del tipo:\\n&quot;</span>
         <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;ax^2 + bx +c = 0\\n&quot;</span>
         <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Inserendo da tastiera i valori dei coefficienti a, b, c\\n&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">double</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span> x1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> delta<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\nInserisci i coefficienti a, b, c.\\n\\n&quot;</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;a:&quot;</span><span class="token punctuation">;</span>
    cin <span class="token operator">&gt;&gt;</span> a<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;b:&quot;</span><span class="token punctuation">;</span>
    cin <span class="token operator">&gt;&gt;</span> b<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;c:&quot;</span><span class="token punctuation">;</span>
    cin <span class="token operator">&gt;&gt;</span> c<span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>a<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>b<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>c<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\nEquazione DEGENERE.&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>a<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>b<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\nEquazione IMPOSSIBILE.&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\nEquazione di PRIMO grado.&quot;</span><span class="token punctuation">;</span>
        x1 <span class="token operator">=</span> <span class="token operator">-</span>b<span class="token operator">/</span>c<span class="token punctuation">;</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\nx=&quot;</span> <span class="token operator">&lt;&lt;</span> x1<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">{</span>
        delta <span class="token operator">=</span> b<span class="token operator">*</span>b <span class="token operator">-</span> <span class="token number">4</span><span class="token operator">*</span>a<span class="token operator">*</span>c<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span> delta <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">)</span>
            cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\nx1, x2, soluzioni immaginarie.\\n&quot;</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> delta <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            x1 <span class="token operator">=</span> <span class="token operator">-</span>b<span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
            cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\nx1=x2=&quot;</span> <span class="token operator">&lt;&lt;</span> x1<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">{</span>
            cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\nSoluzioni reali e distinte.\\n&quot;</span><span class="token punctuation">;</span>
            x1 <span class="token operator">=</span> <span class="token punctuation">(</span> <span class="token operator">-</span>b <span class="token operator">+</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>delta<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token operator">/</span> <span class="token punctuation">(</span> <span class="token number">2</span> <span class="token operator">*</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span>
            x2 <span class="token operator">=</span> <span class="token punctuation">(</span> <span class="token operator">-</span>b <span class="token operator">-</span> <span class="token function">sqrt</span><span class="token punctuation">(</span>delta<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token operator">/</span> <span class="token punctuation">(</span> <span class="token number">2</span> <span class="token operator">*</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span>
            cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\nx1:&quot;</span> <span class="token operator">&lt;&lt;</span> x1 <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\nx2:&quot;</span> <span class="token operator">&lt;&lt;</span> x2<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    cout <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+v+`" alt=""></p><h2 id="conta-dispari-da-sequenza-illimitata" tabindex="-1"><a class="header-anchor" href="#conta-dispari-da-sequenza-illimitata" aria-hidden="true">#</a> Conta dispari da sequenza illimitata</h2><p>Conta i numeri dispari inseriti da tastiera. Termina al primo negativo o nullo</p><p><strong>Modo 1:</strong> Uso del ciclo <code>while()</code></p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token comment">/*
NOTA:
- Lo statemeant: conta += n%2;
- Equivake a: conta = conta + n%2;
- Equivale a: if ( n%2 ) conta++;
*/</span>

<span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Title: Conta dispari&quot;</span>
         <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Description: Conta i numeri dispari inseriti da tastiera. Termina al primo negativo o nullo.\\n&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> n<span class="token punctuation">,</span> conta <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;n: &quot;</span><span class="token punctuation">;</span>
    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span> n <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
        conta <span class="token operator">+=</span> n <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">;</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;n: &quot;</span><span class="token punctuation">;</span>
        cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    cout <span class="token operator">&lt;&lt;</span> conta<span class="token punctuation">;</span>

    cout <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Modo 2:</strong> Uso del ciclo <code>for(;;)</code></p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token comment">/*
NOTA:
- Lo statemeant: conta += n%2;
- Equivake a: conta = conta + n%2;
- Equivale a: if ( n%2 ) conta++;
*/</span>

<span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Title: Conta dispari\\n&quot;</span>
         <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Description: Conta i numeri dispari inseriti da tastiera. Termina al primo negativo o nullo.\\n&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> n<span class="token punctuation">,</span> conta <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;n: &quot;</span><span class="token punctuation">;</span>
    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span> n<span class="token operator">&gt;</span><span class="token number">0</span> <span class="token punctuation">)</span>
        <span class="token punctuation">{</span>
            conta <span class="token operator">+=</span> n <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">;</span>
            cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;n: &quot;</span><span class="token punctuation">;</span>
            cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    cout <span class="token operator">&lt;&lt;</span> conta<span class="token punctuation">;</span>

    cout <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+m+`" alt=""></p><h2 id="stampa-cifre" tabindex="-1"><a class="header-anchor" href="#stampa-cifre" aria-hidden="true">#</a> Stampa cifre</h2><p>Stampa le cifre di un numero intero inserito da tastiera a partire da quella meno significativa.</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Title: Stampa cifre\\n&quot;</span>
         <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Description: Stampa le cifre di un numero intero inserito da tastiera a partire da quella meno significativa.\\n&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> n<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Inserisci un numero intero\\n&quot;</span><span class="token punctuation">;</span>
    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>

    n <span class="token operator">=</span> <span class="token punctuation">(</span> n <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token operator">?</span> n <span class="token operator">:</span> <span class="token operator">-</span>n<span class="token punctuation">;</span>

    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Cifre:\\n&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">do</span> <span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;&gt;&#39;</span> <span class="token operator">&lt;&lt;</span> n<span class="token operator">%</span><span class="token number">10</span> <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>
        n <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span> n<span class="token operator">&gt;</span><span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

    cout <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+b+`" alt=""></p><h2 id="tavola-pitagorica" tabindex="-1"><a class="header-anchor" href="#tavola-pitagorica" aria-hidden="true">#</a> Tavola pitagorica</h2><p>Costruisce la tavola pitagorica dato l&#39;ordine &quot;n&quot; immesso da tastiera.</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Title: Tavola pitagorica&quot;</span>
         <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Description: Costruisce la tavola pitagorica dato l&#39;ordine &#39;n&#39; immesso da tastiera.\\n&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> n<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Inserisci l&#39;ordine &#39;n&#39; della tavola pitagorica:&quot;</span><span class="token punctuation">;</span>
    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>

    n <span class="token operator">=</span> n <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> n<span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">)</span>
            cout <span class="token operator">&lt;&lt;</span> i<span class="token operator">*</span>j <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\t&#39;</span><span class="token punctuation">;</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\n\\n\\n&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    cout <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+g+`" alt=""></p><h2 id="conta-dispari-da-sequenza-limitata" tabindex="-1"><a class="header-anchor" href="#conta-dispari-da-sequenza-limitata" aria-hidden="true">#</a> Conta dispari da sequenza limitata</h2><p>Riceve una sequenza di numeri da tastiera e conta i dispari. Termina anche se un numero inserito \xE8 nullo o negativo</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Title: Conta dispari da sequenza limitata&quot;</span>
         <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Description: Riceve una sequenza di numeri da tastiera e conta i dispari. Termina anche se un numero inserito \xE8 nullo o negativo\\n&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> M<span class="token punctuation">,</span> n<span class="token punctuation">,</span> conta <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Inserisci il numero di elementi della sequenza:&quot;</span><span class="token punctuation">;</span>
    cin <span class="token operator">&gt;&gt;</span> M<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\nInserisci la sequenza:\\n&quot;</span><span class="token punctuation">;</span>
    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>
    conta <span class="token operator">+=</span> n <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">(</span> i <span class="token operator">&lt;</span> M <span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span> n <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
        cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>
        conta <span class="token operator">+=</span> n <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\nI numeri dispari della sequenza sono:&quot;</span> <span class="token operator">&lt;&lt;</span> conta<span class="token punctuation">;</span>

    cout <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+y+`" alt=""></p><h2 id="sequenza-crescente-decrescente-o-non-ordinata" tabindex="-1"><a class="header-anchor" href="#sequenza-crescente-decrescente-o-non-ordinata" aria-hidden="true">#</a> Sequenza crescente, decrescente o non ordinata?</h2><p>Riceve da tastiera una sequenza di numeri interi e calcola se la sequenza \xE8 ordinata in modo crescente, decrescente o non ordinata</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Title: Sequenza crescente, decrescente o non ordinata?\\n&quot;</span>
         <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Description: Riceve da tastiera una sequenza di numeri interi e calcola se la sequenza \xE8 ordinata in modo crescente, decrescente o non ordinata\\n&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> n<span class="token punctuation">,</span> n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> crescente <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> decrescente <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> uguale <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Immetti la Lunghezza della sequenza numerica:&quot;</span><span class="token punctuation">;</span>
    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\nImmetti la sequenza:\\n&quot;</span><span class="token punctuation">;</span>
    cin <span class="token operator">&gt;&gt;</span> n1<span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">(</span> i <span class="token operator">&lt;</span> n <span class="token punctuation">)</span> <span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
        cin <span class="token operator">&gt;&gt;</span> n2<span class="token punctuation">;</span>
        crescente <span class="token operator">+=</span> n2 <span class="token operator">&gt;</span> n1<span class="token punctuation">;</span>
        decrescente <span class="token operator">+=</span> n2 <span class="token operator">&lt;</span> n1<span class="token punctuation">;</span>
        uguale <span class="token operator">+=</span> n2 <span class="token operator">==</span> n1<span class="token punctuation">;</span>
        n1 <span class="token operator">=</span> n2<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span> crescente <span class="token operator">==</span> n<span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">)</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;CRESCENTE&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> decrescente <span class="token operator">==</span> n<span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">)</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;DECRESCENTE&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> uguale <span class="token operator">==</span> n<span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">)</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;UGUALE.&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;NON ORDINATA.&quot;</span><span class="token punctuation">;</span>

    cout <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+q+`" alt=""></p><h2 id="vettore-palindromo" tabindex="-1"><a class="header-anchor" href="#vettore-palindromo" aria-hidden="true">#</a> Vettore palindromo</h2><p>Calcola se il vettore immesso da tastiera \xE8 palindromo</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">riempi</span> <span class="token punctuation">(</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">stampa</span> <span class="token punctuation">(</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">palindromo</span> <span class="token punctuation">(</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Title: Vettore palindromo&quot;</span>
         <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Description: Calcola se il vettore immesso da tastiera \xE8 palindromo\\n&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> nElem<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Dimensione del vettore: &quot;</span><span class="token punctuation">;</span>
    cin <span class="token operator">&gt;&gt;</span> nElem<span class="token punctuation">;</span>

    nElem <span class="token operator">=</span> <span class="token punctuation">(</span> nElem <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> nElem<span class="token punctuation">;</span>

    <span class="token keyword">int</span> <span class="token operator">*</span>vett <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>nElem<span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token function">riempi</span><span class="token punctuation">(</span> vett<span class="token punctuation">,</span> nElem <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">stampa</span> <span class="token punctuation">(</span> vett<span class="token punctuation">,</span> nElem <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">palindromo</span> <span class="token punctuation">(</span> vett<span class="token punctuation">,</span> nElem <span class="token punctuation">)</span> <span class="token punctuation">)</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Vettore palindromo.&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Vettore non palindromo.&quot;</span><span class="token punctuation">;</span>
    
    cout <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">riempi</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> <span class="token operator">*</span>v<span class="token punctuation">,</span> <span class="token keyword">int</span> n <span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Elemento &quot;</span> <span class="token operator">&lt;&lt;</span> i<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;: &quot;</span><span class="token punctuation">;</span>
        cin <span class="token operator">&gt;&gt;</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                        <span class="token comment">//v[i] = *(v+i)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">stampa</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> <span class="token operator">*</span>v<span class="token punctuation">,</span> <span class="token keyword">int</span> n <span class="token punctuation">)</span><span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\n[&quot;</span> <span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;] &lt;&quot;</span> <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;, &quot;</span> <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>               <span class="token comment">//v[i] = *(v+i)</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;&gt;\\n&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">palindromo</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> <span class="token operator">*</span>v<span class="token punctuation">,</span> <span class="token keyword">int</span> n <span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> v<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token punctuation">)</span>                 <span class="token comment">//v[i] != v[j] -&gt; *(v+i) != *(v+j)</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+w+`" alt=""></p><h2 id="conta-ricorrenza-numerica" tabindex="-1"><a class="header-anchor" href="#conta-ricorrenza-numerica" aria-hidden="true">#</a> Conta ricorrenza numerica</h2><p>Conta la ricorrenza delle cifre 0-9 presenti nella sequenza inserita da tastiera</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">azzera</span> <span class="token punctuation">(</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">conta</span> <span class="token punctuation">(</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">stampa</span> <span class="token punctuation">(</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Title: Conta ricorrenza numerica\\n&quot;</span>
         <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Description: Conta la ricorrenza delle cifre 0-9 presenti nella sequenza inserita da tastiera.\\n&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> LunghSeq<span class="token punctuation">,</span> nElem <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> vettConta<span class="token punctuation">[</span>nElem<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment">//Vettore conteggio cifre.</span>
    <span class="token function">azzera</span> <span class="token punctuation">(</span> vettConta<span class="token punctuation">,</span> nElem <span class="token punctuation">)</span><span class="token punctuation">;</span>

    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Lunghezza sequenza: &quot;</span><span class="token punctuation">;</span>
    cin <span class="token operator">&gt;&gt;</span> LunghSeq<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Inserisci la sequenza:\\n&quot;</span><span class="token punctuation">;</span>

    <span class="token function">conta</span> <span class="token punctuation">(</span> vettConta<span class="token punctuation">,</span> LunghSeq <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">stampa</span> <span class="token punctuation">(</span> vettConta<span class="token punctuation">,</span> nElem <span class="token punctuation">)</span><span class="token punctuation">;</span>

    cout <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">azzera</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> <span class="token operator">*</span>v<span class="token punctuation">,</span> <span class="token keyword">int</span> n <span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span>
        v<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">conta</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> <span class="token operator">*</span>v<span class="token punctuation">,</span> <span class="token keyword">int</span> l <span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> num<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
        cin <span class="token operator">&gt;&gt;</span> num<span class="token punctuation">;</span>
        num <span class="token operator">=</span> <span class="token punctuation">(</span> num <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> num <span class="token operator">:</span> <span class="token operator">-</span>num<span class="token punctuation">;</span>     <span class="token comment">//Controllo sul segno.</span>
        <span class="token keyword">do</span><span class="token punctuation">{</span>
            v<span class="token punctuation">[</span> num <span class="token operator">%</span> <span class="token number">10</span> <span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
            num <span class="token operator">=</span> num <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">while</span> <span class="token punctuation">(</span> num <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">stampa</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> <span class="token operator">*</span>v<span class="token punctuation">,</span> <span class="token keyword">int</span> n <span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;:&#39;</span> <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="conta-ricorrenza-letterale" tabindex="-1"><a class="header-anchor" href="#conta-ricorrenza-letterale" aria-hidden="true">#</a> Conta ricorrenza letterale</h2><p>Conta la ricorrenza delle lettere contenute in una stringa</p><ul><li>I caratteri non alfabetici vengono ignorati</li><li>Le maiuscole sono considerate muinuscole</li></ul><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">azzera</span> <span class="token punctuation">(</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">contaLettere</span> <span class="token punctuation">(</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">stampaLettere</span> <span class="token punctuation">(</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Title: Conta ricorrenza letterale\\n&quot;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Description Conta la ricorrenza delle lettere contenute in una stringa\\n&quot;</span>
         <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;- I caratteri non alfabetici vengono ignorati\\n&quot;</span>
         <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;- Le maiuscole sono considerate muinuscole\\n&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">char</span> stringa <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token keyword">int</span> lettere <span class="token operator">=</span> <span class="token number">26</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> vettConta<span class="token punctuation">[</span>lettere<span class="token punctuation">]</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Inserisci la stringa:&quot;</span><span class="token punctuation">;</span>
    cin <span class="token operator">&gt;&gt;</span> stringa<span class="token punctuation">;</span>

    <span class="token function">azzera</span> <span class="token punctuation">(</span> vettConta<span class="token punctuation">,</span> lettere <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">contaLettere</span> <span class="token punctuation">(</span> stringa<span class="token punctuation">,</span> vettConta <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">stampaLettere</span> <span class="token punctuation">(</span> vettConta<span class="token punctuation">,</span> lettere <span class="token punctuation">)</span><span class="token punctuation">;</span>

    cout <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">azzera</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> <span class="token operator">*</span>v<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span>
        v<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">contaLettere</span> <span class="token punctuation">(</span> <span class="token keyword">char</span> <span class="token operator">*</span>str<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>c <span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">&#39;\\0&#39;</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> <span class="token char">&#39;a&#39;</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token char">&#39;z&#39;</span><span class="token punctuation">)</span>
            c<span class="token punctuation">[</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">&#39;a&#39;</span> <span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;=</span> <span class="token char">&#39;A&#39;</span> <span class="token operator">&amp;&amp;</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token char">&#39;Z&#39;</span> <span class="token punctuation">)</span>
            c<span class="token punctuation">[</span> str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token char">&#39;A&#39;</span> <span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">stampaLettere</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> <span class="token operator">*</span>v<span class="token punctuation">,</span> <span class="token keyword">int</span> n <span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token char">&#39;a&#39;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;:&#39;</span> <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="segno-elementi-di-un-vettore" tabindex="-1"><a class="header-anchor" href="#segno-elementi-di-un-vettore" aria-hidden="true">#</a> Segno elementi di un vettore</h2><p>Stampa il segno degli elementi di un vettore.</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Title: Segno elementi di un vettore\\n&quot;</span>
         <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Description: Stampa il segno degli elementi di un vettore\\n&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> nElem<span class="token punctuation">,</span> pos <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> null <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> neg <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Inserisci nElem: &quot;</span><span class="token punctuation">;</span>
    cin <span class="token operator">&gt;&gt;</span> nElem<span class="token punctuation">;</span>

    nElem <span class="token operator">=</span> <span class="token punctuation">(</span> nElem <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token operator">?</span> nElem <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> <span class="token operator">*</span>vett <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>nElem<span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nElem<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Elemento &quot;</span> <span class="token operator">&lt;&lt;</span> i<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;:&#39;</span><span class="token punctuation">;</span>
        cin <span class="token operator">&gt;&gt;</span> vett<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nElem<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span> vett<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">)</span> pos<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> vett<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span> null<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> neg<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\nPos: &quot;</span> <span class="token operator">&lt;&lt;</span> pos
         <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\nNull: &quot;</span> <span class="token operator">&lt;&lt;</span> null
         <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\nNeg: &quot;</span> <span class="token operator">&lt;&lt;</span> neg<span class="token punctuation">;</span>

    cout <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="vettore-elementi-dispari-nulli-o-pari" tabindex="-1"><a class="header-anchor" href="#vettore-elementi-dispari-nulli-o-pari" aria-hidden="true">#</a> Vettore - elementi dispari, nulli o pari?</h2><p>Acquisisce un vettore da tastiera e restituisce il numero degli elementi dispari, nulli e pari in un vettore</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">leggi</span> <span class="token punctuation">(</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">dzp</span> <span class="token punctuation">(</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Title: Vettore - elementi dispari, nulli o pari?\\n&quot;</span>
         <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Description: Acquisisce un vettore da tastiera Stampa il numero degli elementi dispari, nulli e pari in un vettore\\n&quot;</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> nElem<span class="token punctuation">,</span> selettore<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Inserisci il numero di elementi del vettore, nElem: &quot;</span><span class="token punctuation">;</span>
    cin <span class="token operator">&gt;&gt;</span> nElem<span class="token punctuation">;</span>
    nElem <span class="token operator">=</span> nElem <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">?</span> nElem <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token comment">//Riempi vettore</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>vett <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>nElem<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">leggi</span> <span class="token punctuation">(</span> vett<span class="token punctuation">,</span> nElem <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//Stampa il numero di elementi dispari</span>
    selettore <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\nDispari: &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token function">dzp</span> <span class="token punctuation">(</span> selettore<span class="token punctuation">,</span> vett<span class="token punctuation">,</span> nElem <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//Stampa il numero di elementi nulli</span>
    selettore <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\nNulli: &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token function">dzp</span> <span class="token punctuation">(</span> selettore<span class="token punctuation">,</span> vett<span class="token punctuation">,</span> nElem <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//Stampa il numero di elementi pari</span>
    selettore <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\nPari: &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token function">dzp</span> <span class="token punctuation">(</span> selettore<span class="token punctuation">,</span> vett<span class="token punctuation">,</span> nElem <span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">char</span> c<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Comando?: (d = dispari, n = nulli, p = pari)&quot;</span><span class="token punctuation">;</span>
    cin <span class="token operator">&gt;&gt;</span> c<span class="token punctuation">;</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token char">&#39;d&#39;</span><span class="token operator">:</span>
           cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\nDispari: &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token function">dzp</span> <span class="token punctuation">(</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> vett<span class="token punctuation">,</span> nElem <span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token char">&#39;n&#39;</span><span class="token operator">:</span>
            cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\nNulli: &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token function">dzp</span> <span class="token punctuation">(</span> <span class="token number">0</span><span class="token punctuation">,</span> vett<span class="token punctuation">,</span> nElem <span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token char">&#39;p&#39;</span><span class="token operator">:</span>
            cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\nDispari: &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token function">dzp</span> <span class="token punctuation">(</span> <span class="token number">1</span><span class="token punctuation">,</span> vett<span class="token punctuation">,</span> nElem <span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span><span class="token operator">:</span>
            cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;!!!&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    cout <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">leggi</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> <span class="token operator">*</span>v<span class="token punctuation">,</span> <span class="token keyword">int</span> n <span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i <span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Elemento &quot;</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;:&#39;</span><span class="token punctuation">;</span>
        cin <span class="token operator">&gt;&gt;</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">dzp</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> sel<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>v<span class="token punctuation">,</span> <span class="token keyword">int</span> n <span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> conta <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span>sel<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
                v<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token operator">-</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">:</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token comment">//NECESSARIO!!</span>
                conta <span class="token operator">+=</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">%</span><span class="token number">2</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
                v<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token operator">-</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">:</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token comment">//NECESSARIO!!</span>
                conta <span class="token operator">+=</span> <span class="token punctuation">(</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
                v<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> <span class="token operator">-</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">:</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token comment">//NECESSARIO!!</span>
                conta <span class="token operator">+=</span> <span class="token operator">!</span><span class="token punctuation">(</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">%</span><span class="token number">2</span> <span class="token operator">||</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token punctuation">}</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> conta<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="vettore-elementi-ordinati" tabindex="-1"><a class="header-anchor" href="#vettore-elementi-ordinati" aria-hidden="true">#</a> Vettore - elementi ordinati?</h2><p>Acquisisce un vettore da tastiera e restitusice se gli elementi sono in ordine crescente, descrescente o non ordinati</p><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">leggi</span> <span class="token punctuation">(</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">ordinato</span> <span class="token punctuation">(</span> <span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">stampa</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Title: Vettore - elementi ordinati? \\n&quot;</span>
         <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Description: Acquisisce un vettore da tastiera e restitusice se gli elementi sono in ordine crescente, descrescente o non ordinati\\n&quot;</span><span class="token punctuation">;</span> 

    <span class="token keyword">int</span> nElem<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;nElem: &quot;</span><span class="token punctuation">;</span>
    cin <span class="token operator">&gt;&gt;</span> nElem<span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>vett <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span> <span class="token punctuation">[</span>nElem<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">leggi</span> <span class="token punctuation">(</span> vett<span class="token punctuation">,</span> nElem <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">stampa</span> <span class="token punctuation">(</span> <span class="token function">ordinato</span><span class="token punctuation">(</span> vett<span class="token punctuation">,</span> nElem <span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>

    cout <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">leggi</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> <span class="token operator">*</span>v<span class="token punctuation">,</span> <span class="token keyword">int</span> n <span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;El &quot;</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;:&#39;</span><span class="token punctuation">;</span>
        cin <span class="token operator">&gt;&gt;</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">ordinato</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> <span class="token operator">*</span>v<span class="token punctuation">,</span> <span class="token keyword">int</span> n <span class="token punctuation">)</span><span class="token punctuation">{</span>

    <span class="token keyword">int</span> decrescente <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> crescente <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> uguale <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
        decrescente <span class="token operator">&amp;=</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> v<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        crescente <span class="token operator">&amp;=</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> v<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        uguale <span class="token operator">&amp;=</span> v<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> v<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span> decrescente <span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> uguale <span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> crescente <span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">stampa</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> ord <span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span> ord <span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">case</span> <span class="token operator">-</span><span class="token number">1</span><span class="token operator">:</span>
            cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\nVettore ordinato in senso decrescente.&quot;</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>
            cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\nElementi del vettore uguali.&quot;</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token operator">+</span><span class="token number">1</span><span class="token operator">:</span>
            cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\nVettore ordinato in senso crescente.&quot;</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token operator">+</span><span class="token number">2</span><span class="token operator">:</span>
            cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\nElementi del vettore non ordinati.&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="buffer-circolare" tabindex="-1"><a class="header-anchor" href="#buffer-circolare" aria-hidden="true">#</a> Buffer circolare</h2><p>Inizializza un buffer circolare di una dimensione impostata da tastiera. Sono disponibili i comandi:</p><ul><li><code>i</code>: inserisci, inscerisce un elemento nel buffer</li><li><code>e</code>: estrai, estrai il primo elemento dal buffer in modoalit\xE0 LIFO (last input, first output)</li><li><code>&lt;</code>: termina</li></ul><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token comment">// &#39;in&#39; e &#39;out&#39; devono essere inizialmente sovrapposti.</span>
<span class="token comment">// &#39;in&#39; e &#39;out&#39; sono INDICI.</span>
<span class="token comment">// COMANDO :</span>
<span class="token comment">// i = inserisci</span>
<span class="token comment">// e = estrai</span>

<span class="token keyword">struct</span> <span class="token class-name">buffer</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> dimensione<span class="token punctuation">;</span>
    <span class="token keyword">int</span> in<span class="token punctuation">;</span>
    <span class="token keyword">int</span> out<span class="token punctuation">;</span>
    <span class="token keyword">int</span> nElem<span class="token punctuation">;</span>
    <span class="token keyword">int</span> <span class="token operator">*</span>pHEAP<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">inizializza</span><span class="token punctuation">(</span> buffer <span class="token operator">&amp;</span>buf <span class="token punctuation">,</span> <span class="token keyword">int</span> dim <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">inserisci</span> <span class="token punctuation">(</span> buffer <span class="token operator">&amp;</span>buf <span class="token punctuation">,</span> <span class="token keyword">int</span> val <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">estrai</span> <span class="token punctuation">(</span> buffer <span class="token operator">&amp;</span>buf <span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>val <span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Title: Buffer circolare\\n&quot;</span>
         <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Description: Inizializza un buffer circolare di una dimensione impostata da tastiera.\\n&quot;</span>
         <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Sono disponibili i comandi:\\n&quot;</span> 
         <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;- &#39;i&#39;: inserisci, inscerisce un elemento nel buffer\\n&quot;</span>
         <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;- &#39;e&#39;: estrai, estrai il primo elemento dal buffer in modoalit\xE0 LIFO (last input, first output)\\n&quot;</span>
         <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;- &#39;&lt;&#39;: termina\\n&quot;</span>

    buffer b1<span class="token punctuation">;</span>
    <span class="token keyword">int</span> dim<span class="token punctuation">,</span> val<span class="token punctuation">;</span>
    <span class="token keyword">char</span> c<span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Inizializza il buffer.\\n&quot;</span>
         <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Dimensione:&quot;</span><span class="token punctuation">;</span>
    cin <span class="token operator">&gt;&gt;</span> dim<span class="token punctuation">;</span>
    <span class="token function">inizializza</span> <span class="token punctuation">(</span> b1<span class="token punctuation">,</span> dim <span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\nInserisci un comando.\\n&quot;</span>
         <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;i -&gt; inserisci.\\n&quot;</span>
         <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;e -&gt; estrai.\\n&quot;</span>
         <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;&lt; -&gt; termina.\\n&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\n\\nComando?? &quot;</span><span class="token punctuation">;</span>
        cin <span class="token operator">&gt;&gt;</span> c<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span> c <span class="token operator">==</span> <span class="token char">&#39;&lt;&#39;</span><span class="token punctuation">)</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">switch</span> <span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">case</span> <span class="token char">&#39;i&#39;</span><span class="token operator">:</span><span class="token punctuation">{</span>
                <span class="token keyword">int</span> i<span class="token punctuation">;</span>
                cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\nImmetti un valore:&quot;</span><span class="token punctuation">;</span>
                cin <span class="token operator">&gt;&gt;</span> val<span class="token punctuation">;</span>
                i <span class="token operator">=</span> <span class="token function">inserisci</span> <span class="token punctuation">(</span> b1<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>i <span class="token punctuation">)</span>
                    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\n\\nBUFFER PIENO.\\n&quot;</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">case</span> <span class="token char">&#39;e&#39;</span><span class="token operator">:</span><span class="token punctuation">{</span>
                <span class="token keyword">int</span> i<span class="token punctuation">;</span>
                i <span class="token operator">=</span> <span class="token function">estrai</span> <span class="token punctuation">(</span> b1<span class="token punctuation">,</span> val <span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span>i <span class="token punctuation">)</span><span class="token punctuation">{</span>
                    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\n\\nBUFFER VUOTO.\\n&quot;</span><span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">else</span><span class="token punctuation">{</span>
                    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;\\nL&#39;elemento vale: &quot;</span> <span class="token operator">&lt;&lt;</span> val<span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">default</span><span class="token operator">:</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    cout <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">inizializza</span> <span class="token punctuation">(</span> buffer<span class="token operator">&amp;</span> buf<span class="token punctuation">,</span> <span class="token keyword">int</span> dim <span class="token punctuation">)</span><span class="token punctuation">{</span>
    buf<span class="token punctuation">.</span>in <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    buf<span class="token punctuation">.</span>out <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    buf<span class="token punctuation">.</span>nElem <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    buf<span class="token punctuation">.</span>dimensione <span class="token operator">=</span> dim <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">?</span> dim <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>
    buf<span class="token punctuation">.</span>pHEAP <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span> <span class="token punctuation">[</span>buf<span class="token punctuation">.</span>dimensione<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">inserisci</span> <span class="token punctuation">(</span> buffer<span class="token operator">&amp;</span> buf<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// Controllo se e&#39; pieno.</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> buf<span class="token punctuation">.</span>nElem <span class="token operator">&gt;=</span> buf<span class="token punctuation">.</span>dimensione <span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// Inserisco l&#39;elemento nel primo posto vuoto.</span>
    buf<span class="token punctuation">.</span>pHEAP <span class="token punctuation">[</span>buf<span class="token punctuation">.</span>in<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">;</span>
    buf<span class="token punctuation">.</span>in <span class="token operator">=</span> buf<span class="token punctuation">.</span>in <span class="token operator">==</span> buf<span class="token punctuation">.</span>dimensione <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> buf<span class="token punctuation">.</span>in<span class="token punctuation">;</span>
    buf<span class="token punctuation">.</span>nElem<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">estrai</span> <span class="token punctuation">(</span> buffer<span class="token operator">&amp;</span> buf<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>val <span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> buf<span class="token punctuation">.</span>nElem <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    val <span class="token operator">=</span> buf<span class="token punctuation">.</span>pHEAP <span class="token punctuation">[</span>buf<span class="token punctuation">.</span>out<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    buf<span class="token punctuation">.</span>out <span class="token operator">=</span> buf<span class="token punctuation">.</span>out <span class="token operator">==</span> buf<span class="token punctuation">.</span>dimensione <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> buf<span class="token punctuation">.</span>out<span class="token punctuation">;</span>
    buf<span class="token punctuation">.</span>nElem<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="contenitore" tabindex="-1"><a class="header-anchor" href="#contenitore" aria-hidden="true">#</a> Contenitore</h2><p>Inizializza due contenitori di una dimensione impostata da tastiera contenenti lettere. Sono disponibili i seguenti comandi:</p><ul><li><code>i</code>: inizializza, inizializza un contenitore</li><li><code>&gt;</code>: inserisci, iscerisce un elemento immesso da tastiera nel contenitore</li><li><code>&lt;</code>: estrai, estrae un elmento da un contenitore</li><li><code>u</code>: Ritorna un contenitore con gli elementi a comune</li><li><code>d</code>: Ritorna un contenitore con gli elementi diversi</li></ul><div class="language-cpp ext-cpp line-numbers-mode"><pre class="language-cpp"><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">contenitore</span> <span class="token punctuation">{</span>
    <span class="token keyword">int</span> nElem<span class="token punctuation">;</span>
    <span class="token keyword">int</span> cap<span class="token punctuation">;</span>
    <span class="token keyword">int</span> ee<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">inizializza</span> <span class="token punctuation">(</span> contenitore <span class="token operator">&amp;</span>c<span class="token punctuation">,</span> <span class="token keyword">int</span> N <span class="token punctuation">)</span><span class="token punctuation">{</span>
    N <span class="token operator">=</span> N <span class="token operator">&gt;</span> <span class="token number">1</span> <span class="token operator">?</span> N <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>
    c<span class="token punctuation">.</span>cap <span class="token operator">=</span> N<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">26</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span>
        c<span class="token punctuation">.</span>ee<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    c<span class="token punctuation">.</span>nElem <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">inserisci</span> <span class="token punctuation">(</span> contenitore <span class="token operator">&amp;</span>c<span class="token punctuation">,</span> <span class="token keyword">char</span> p <span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> c<span class="token punctuation">.</span>nElem <span class="token operator">&gt;=</span> c<span class="token punctuation">.</span>cap <span class="token operator">||</span> p <span class="token operator">&lt;</span> <span class="token char">&#39;a&#39;</span> <span class="token operator">||</span> p <span class="token operator">&gt;</span> <span class="token char">&#39;z&#39;</span> <span class="token punctuation">)</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    c<span class="token punctuation">.</span>ee<span class="token punctuation">[</span> p <span class="token operator">-</span> <span class="token char">&#39;a&#39;</span> <span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>
    c<span class="token punctuation">.</span>nElem<span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">estrai</span> <span class="token punctuation">(</span> contenitore <span class="token operator">&amp;</span>c<span class="token punctuation">,</span> <span class="token keyword">char</span> p <span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> p <span class="token operator">&lt;</span> <span class="token char">&#39;a&#39;</span> <span class="token operator">||</span> p <span class="token operator">&gt;</span> <span class="token char">&#39;z&#39;</span> <span class="token punctuation">)</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    c<span class="token punctuation">.</span>nElem <span class="token operator">-=</span> c<span class="token punctuation">.</span>ee<span class="token punctuation">[</span> p <span class="token operator">-</span> <span class="token char">&#39;a&#39;</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>
    c<span class="token punctuation">.</span>ee<span class="token punctuation">[</span> p <span class="token operator">-</span> <span class="token char">&#39;a&#39;</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">scrivi</span> <span class="token punctuation">(</span> contenitore <span class="token operator">&amp;</span>c <span class="token punctuation">)</span><span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;&lt;&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> c<span class="token punctuation">.</span>ee <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">)</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;a&#39;</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;: &quot;</span> <span class="token operator">&lt;&lt;</span> c<span class="token punctuation">.</span>ee<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">25</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span> c<span class="token punctuation">.</span>ee <span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
            cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;, &quot;</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">char</span> <span class="token punctuation">(</span> <span class="token char">&#39;a&#39;</span> <span class="token operator">+</span> i <span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;: &quot;</span> <span class="token operator">&lt;&lt;</span> c<span class="token punctuation">.</span>ee<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        cout <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;&gt;&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

contenitore <span class="token function">cambiaCapienza</span> <span class="token punctuation">(</span> <span class="token keyword">const</span> contenitore <span class="token operator">&amp;</span>c<span class="token punctuation">,</span> <span class="token keyword">int</span> N <span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span> N <span class="token operator">&lt;</span> c<span class="token punctuation">.</span>nElem <span class="token punctuation">)</span>
        <span class="token keyword">return</span> c<span class="token punctuation">;</span>
    contenitore t<span class="token punctuation">;</span>
    t <span class="token operator">=</span> c<span class="token punctuation">;</span>
    t<span class="token punctuation">.</span>cap <span class="token operator">=</span> N<span class="token punctuation">;</span>
    <span class="token keyword">return</span> t<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

contenitore <span class="token function">diversiE</span> <span class="token punctuation">(</span> <span class="token keyword">const</span> contenitore <span class="token operator">&amp;</span>c1<span class="token punctuation">,</span> <span class="token keyword">const</span> contenitore <span class="token operator">&amp;</span>c2 <span class="token punctuation">)</span><span class="token punctuation">{</span>
    contenitore c3<span class="token punctuation">;</span>
    <span class="token keyword">int</span> N<span class="token punctuation">;</span>
    N <span class="token operator">=</span> <span class="token punctuation">(</span>c1<span class="token punctuation">.</span>cap <span class="token operator">&lt;=</span> c2<span class="token punctuation">.</span>cap<span class="token punctuation">)</span> <span class="token operator">?</span> c1<span class="token punctuation">.</span>cap <span class="token operator">:</span> c2<span class="token punctuation">.</span>cap<span class="token punctuation">;</span>
    <span class="token function">inizializza</span> <span class="token punctuation">(</span> c3<span class="token punctuation">,</span> N <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">26</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span> c1<span class="token punctuation">.</span>ee<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> c2<span class="token punctuation">.</span>ee<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        c3<span class="token punctuation">.</span>ee<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        c3<span class="token punctuation">.</span>nElem<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

contenitore <span class="token function">diversiN</span> <span class="token punctuation">(</span> <span class="token keyword">const</span> contenitore <span class="token operator">&amp;</span>c1<span class="token punctuation">,</span> <span class="token keyword">const</span> contenitore <span class="token operator">&amp;</span>c2 <span class="token punctuation">)</span><span class="token punctuation">{</span>
    contenitore c3<span class="token punctuation">;</span>
    <span class="token keyword">int</span> N<span class="token punctuation">;</span>
    <span class="token function">inizializza</span> <span class="token punctuation">(</span> c3<span class="token punctuation">,</span> c1<span class="token punctuation">.</span>cap <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">26</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span> c1<span class="token punctuation">.</span>ee<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">||</span> c2<span class="token punctuation">.</span>ee<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
            c3<span class="token punctuation">.</span>ee<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
            c3<span class="token punctuation">.</span>nElem<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> c3<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">capienza</span> <span class="token punctuation">(</span> <span class="token keyword">const</span> contenitore c <span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> c<span class="token punctuation">.</span>cap<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">quanti</span> <span class="token punctuation">(</span> <span class="token keyword">const</span> contenitore c <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> c<span class="token punctuation">.</span>nElem<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Title: Buffer\\n&quot;</span>
         <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Description: Inizializza due contenitori di una dimensione impostata da tastiera contenenti lettere.\\n&quot;</span>
         <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;Sono disponibili i seguenti comandi:\\n&quot;</span>
         <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;- \`i\`: inizializza, inizializza un contenitore\\n&quot;</span>
         <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;- \`&gt;\`: inserisci, iscerisce un elemento immesso da tastiera nel contenitore\\n&quot;</span>
         <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;- \`&lt;\`: estrai, estrae un elmento da un contenitore\\n&quot;</span>
         <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;- \`u\`: Ritorna un contenitore con gli elementi a comune\\n&quot;</span>
         <span class="token operator">&lt;&lt;</span> <span class="token string">&quot;- \`d\`: Ritorna un contenitore con gli elementi diversi\\n&quot;</span>

    <span class="token comment">/*
    contenitore c1, c2;
    cout &lt;&lt; &quot;\\n\\n&quot;
         &lt;&lt; &quot;i: inizializza.\\n&quot;
         &lt;&lt; &quot;&gt;: inserisci.\\n&quot;
         &lt;&lt; &quot;&lt;: estrai.\\n&quot;
         &lt;&lt; &quot;c: cambia capienaza.\\n&quot;
         &lt;&lt; &quot;u: Ritorna un contenitore con gli elementi a comune.\\n&quot;
         &lt;&lt; &quot;d: Ritorna un contenitore con elementi diversi&quot;
         &lt;&lt; &quot;q:&quot;
    int capienza;
    int c;
    cout &lt;&lt; &quot;Inserisci capienza: &quot;;
    cin &gt;&gt; capienza;
    */</span>
    contenitore c1<span class="token punctuation">;</span>
    <span class="token function">inizializza</span> <span class="token punctuation">(</span> c1<span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>


    <span class="token function">inserisci</span> <span class="token punctuation">(</span> c1<span class="token punctuation">,</span> <span class="token char">&#39;a&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">inserisci</span> <span class="token punctuation">(</span> c1<span class="token punctuation">,</span> <span class="token char">&#39;b&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">inserisci</span> <span class="token punctuation">(</span> c1<span class="token punctuation">,</span> <span class="token char">&#39;a&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">inserisci</span> <span class="token punctuation">(</span> c1<span class="token punctuation">,</span> <span class="token char">&#39;a&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">inserisci</span> <span class="token punctuation">(</span> c1<span class="token punctuation">,</span> <span class="token char">&#39;d&#39;</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">scrivi</span> <span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">;</span>

    cout <span class="token operator">&lt;&lt;</span> <span class="token char">&#39;\\n&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,106),z=[f];function x(E,I){return s(),a("div",null,z)}var A=n(h,[["render",x],["__file","index.html.vue"]]);export{A as default};
